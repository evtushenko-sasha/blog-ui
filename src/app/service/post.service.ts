import {Injectable} from '@angular/core';
import {HttpClient} from '@angular/common/http';
import {Observable, of, Subscription} from 'rxjs';
import {FullPostDto} from '../model/FullPostDto';
import {ShortPostDto} from '../model/ShortPostDto';
import {CacheService} from 'ionic-cache';
import {ToastController} from '@ionic/angular';

@Injectable({
    providedIn: 'root'
})
export class PostService {

    constructor(private httpClient: HttpClient,
                private cache: CacheService,
                private toastController: ToastController) {
        this.subscription = new Subscription();
    }

    posts: ShortPostDto[] = [
        {
            id: 1,
            title: 'Что варится в пекулярных звездах',
            countBookmarks: 1,
            countComments: 2,
            countViews: 10,
            creationTime: new Date('December 17, 2021 03:24:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/getpro/habr/upload_files/e91/1e6/bbd/e911e6bbd0e024cbfd49a1fed9f1ae66.jpg',
            karma: 2,
            tags: [{id: 1, title: 'Астрономия'}, {id: 2, title: 'Химия'}],
            user: {
                id: 1,
                firstName: 'Oleg',
                lastName: 'Sivchenko',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/27b/f35/f6f/27bf35f6f595fc136b70c384752ba387.jpg',
                login: 'OlegSivchenko'
            }
        },
        {
            id: 2,
            title: 'Термоядерный синтез все реальнее: MAST, EAST и ITER, дейтерий-тритиевые эксперименты и другие достижения',
            countBookmarks: 10,
            countComments: 4,
            countViews: 20,
            creationTime: new Date('December 19, 2021 04:21:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/webt/r0/ps/3d/r0ps3dlk-yoq2ydh-k_kbswuvni.jpeg',
            karma: 2,
            tags: [{id: 3, title: 'будущее'}, {id: 4, title: 'энергетика'}],
            user: {
                id: 2,
                firstName: 'Deluar',
                lastName: 'Vachenko',
                imageUrl: 'https://cdn.profile.ru/wp-content/uploads/2020/03/shutterstock_754674145.jpg',
                login: 'Deluar'
            }
        },
        {
            id: 3,
            title: 'Алюминиевый профиль как универсальный ресурс для сборки чего угодн',
            countBookmarks: 1,
            countComments: 1,
            countViews: 29,
            creationTime: new Date('December 29, 2021 04:21:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/getpro/habr/post_images/c52/910/20f/c5291020fa36fdfb0383786f8f9e18ab.jpg',
            karma: 19,
            tags: [{id: 5, title: 'конструкции'}, {id: 6, title: 'алюминий'}],
            user: {
                id: 3,
                firstName: 'ALex',
                lastName: 'Selectel',
                imageUrl: 'https://www.passion.ru/thumb/0x600/filters:quality(75)/imgs/2017/05/12/14/787219/76c0f20dcf1a80a446674ec6677a681084ff2b38.jpg',
                login: 'ALexSelectel'
            }
        },
        {
            id: 4,
            title: 'Актуальность принципов SOLID',
            countBookmarks: 11,
            countComments: 12,
            countViews: 1,
            creationTime: new Date('September 29, 2021 04:21:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/webt/ky/jk/lc/kyjklcgdkx2rxgcbrfxbnnofjqu.png',
            karma: 19,
            tags: [{id: 7, title: 'solid'}, {id: 8, title: 'архитектурные паттерны'}],
            user: {
                id: 4,
                firstName: 'Kiril',
                lastName: 'Barchuk',
                imageUrl: 'https://img.freepik.com/free-photo/handsome-confident-smiling-man-with-hands-crossed-on-chest_176420-18743.jpg?size=626&ext=jpg',
                login: 'KirilBarchuk'
            }
        },
        {
            id: 5,
            title: 'UML умер, а никто и не заметил?',
            countBookmarks: 0,
            countComments: 2,
            countViews: 13,
            creationTime: new Date('September 11, 2021 09:29:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/webt/go/re/vg/gorevgjqipvqgbxecrd6mnxzqxw.jpeg',
            karma: 1,
            tags: [{id: 9, title: 'uml'}, {id: 10, title: 'метки'}],
            user: {
                id: 5,
                firstName: 'Companu',
                lastName: 'VDSina.ru',
                imageUrl: 'https://habrastorage.org/getpro/habr/company/349/b75/e68/349b75e680748f727261c7de1a4e1c5f.png',
                login: 'VDSina.ru'
            }
        },
        {
            id: 6,
            title: 'Хватит организовывать код по типу файлов',
            countBookmarks: 1,
            countComments: 1,
            countViews: 3,
            creationTime: new Date('May 19, 2021 09:29:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/getpro/habr/upload_files/50e/46b/fe6/50e46bfe63169183849e22198121ae5e.png',
            karma: 1,
            tags: [{id: 11, title: 'организация кода'}],
            user: {
                id: 6,
                firstName: 'Kislay',
                lastName: 'Verma',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/f8e/004/d87/f8e004d878b0e35c2defaaca5386ae70.png',
                login: 'KislayVerma'
            }
        },
        {
            id: 7,
            title: 'Собираем и устанавливаем свою Linux-систему на микроконтроллер STM32MP1',
            countBookmarks: 0,
            countComments: 0,
            countViews: 4,
            creationTime: new Date('May 29, 2021 06:29:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/webt/ck/kd/gv/ckkdgvhjv2oui24ahhfq98lqny4.png',
            karma: 2,
            tags: [{id: 12, title: 'микроконтроллеры'}, {id: 13, title: 'linux'}],
            user: {
                id: 7,
                firstName: 'Маклауд',
                lastName: 'Verlan',
                imageUrl: 'https://www.wmj.ru/thumb/0x1502/filters:quality(75):no_upscale()/imgs/2017/11/08/13/1145577/02f490db91711eb4e7ef37ecedd7e2e9cb02dea6.jpg"',
                login: 'МаклаудVerlan'
            }
        },
        {
            id: 8,
            title: 'Работа в малом бизнесе в ИТ: 7 важных уроков',
            countBookmarks: 111,
            countComments: 1,
            countViews: 13,
            creationTime: new Date('May 30, 2021 17:29:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/getpro/habr/upload_files/f7a/51d/319/f7a51d3191eaa9c2a49781f51b34a0b9.png',
            karma: 1,
            tags: [{id: 13, title: 'работа в малом бизнесе'}, {id: 14, title: 'малый бизнес'}],
            user: {
                id: 8,
                firstName: 'Lexa',
                lastName: 'RegionSoft',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/f8e/004/d87/f8e004d878b0e35c2defaaca5386ae70.png',
                login: 'LexaRegionSoft'
            }
        },
        {
            id: 9,
            title: 'Micro-USB-кабели и питание Raspberry Pi',
            countBookmarks: 4,
            countComments: 0,
            countViews: 9,
            creationTime: new Date('May 01, 2021 19:29:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/webt/oj/bj/qd/ojbjqdwzme1z_la1z-2dhnielag.jpeg',
            karma: 19,
            tags: [{id: 15, title: 'cable for power'}, {id: 16, title: 'питание'}],
            user: {
                id: 9,
                firstName: 'Valik',
                lastName: 'RUVDS.com',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/f8e/004/d87/f8e004d878b0e35c2defaaca5386ae70.png',
                login: 'ValikRUVDS.com'
            }
        },
        {
            id: 10,
            title: 'Обзор PAT9125 оптического датчика филамента для 3d печати',
            countBookmarks: 1,
            countComments: 0,
            countViews: 3,
            creationTime: new Date('May 31, 2021 18:51:00'),
            description: '',
            imageUrl: 'https://habrastorage.org/getpro/habr/upload_files/50e/46b/fe6/50e46bfe63169183849e22198121ae5e.png',
            karma: 1,
            tags: [{id: 17, title: 'Датчик филамента'}, {id: 18, title: '3d-печать'}],
            user: {
                id: 10,
                firstName: 'Grisha',
                lastName: 'deema35',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/c63/50c/4cd/c6350c4cdc311a1ddc793207248e31cb.gif',
                login: 'GrishaDeema35'
            }
        }
    ];

    fullPosts: FullPostDto[] = [
        {
            id: 1,
            title: 'Что варится в пекулярных звездах',
            countBookmarks: 1,
            countComments: 2,
            countViews: 10,
            creationTime: new Date('December 17, 1995 03:24:00'),
            text: '<div class="post__body post__body_full">\n' +
                '      <div class="post__text post__text_v2" id="post-content-body"><p>Однажды сэр Артур Эддингтон, считающийся <a href="https://stimul.online/articles/science-and-technology/v-etot-den-bog-byl-na-storone-eynshteyna/" rel="noopener noreferrer nofollow">основателем</a> теоретической астрофизики, заявил, что «<a href="https://www.popmech.ru/science/8156-rozhdenie-golubykh-gigantov-nichego-net-bolee-prostogo-chem-zvezda-artur-stenli-eddington/" rel="noopener noreferrer nofollow">ничего нет более простого, чем звезда</a>». Действительно, при всей грандиозности большинство звезд – это почти однородные и очень стабильные объекты. Звезда <a href="http://www.astronet.ru/db/msg/1169759/evolution/hr_diagram/ms.htm" rel="noopener noreferrer nofollow">главной последовательности</a> в течение миллионов, миллиардов или, возможно, даже <a href="https://www.iguides.ru/main/other/kak_umirayut_zvezdy/" rel="noopener noreferrer nofollow">триллионов</a> лет перерабатывает запасы водорода, постепенно сдвигаясь в красную часть спектра, а в конце пути, как правило, превращаясь в белый карлик. При этом о триллионах лет сейчас можно говорить лишь гипотетически, но красные и оранжевые карлики действительно могут просуществовать так долго, тогда как голубые сверхгиганты выгорают за миллионы лет. Например, <a href="http://kosmografia.ru/zvezda-spika-ili-alfa-devy/#:~:text=%D0%9F%D0%BE%20%D0%BE%D1%86%D0%B5%D0%BD%D0%BA%D0%B0%D0%BC%20%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%BD%D0%BE%D0%BC%D0%BE%D0%B2%20%D0%B2%D0%BE%D0%B7%D1%80%D0%B0%D1%81%D1%82%20%D0%A1%D0%BF%D0%B8%D0%BA%D0%B8%20%D1%81%D0%BE%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D1%" rel="noopener noreferrer nofollow">возраст</a> Спики (альфа Девы) составляет около 12,5 миллионов лет.</p><p>Звезда светится благодаря процессу термоядерного синтеза, в ходе которого ядра водорода превращаются в ядра гелия, а гелий на заключительных этапах существования звезды порождает и более тяжелые элементы. <a href="http://nuclphys.sinp.msu.ru/astro/astro14.htm" rel="noopener noreferrer nofollow">Последовательность</a> примерно такова (в скобках номер элемента в таблице Менделеева): водород (1) → гелий (2) → небольшие примеси лития (3) → углерод (6) → магний (12) → железо (26) + небольшие примеси никеля (28), а также спорадически возникающие ядра кадмия и олова. В целом элементы тяжелее железа в обычных звездах практически не образуются. Их источниками являются взрывы сверхновых, при которых синтезируются все элементы как минимум вплоть до урана (атомный номер 92, атомная масса — 238), а также взрывы <a href="https://habr.com/ru/post/413783/" rel="noopener noreferrer nofollow">гиперновых</a>, при которых схлопывание умирающей звезды происходит постепенно, и, за счет огромной исходной массы светила, выделяемая энергия еще выше. </p><p>Кстати, существует следующее предположение: обилие тяжелых элементов на Земле может быть связано с тем, что в обозримом прошлом недалеко от нашей планеты произошел взрыв гиперновой, и нас «накрыло взрывной волной» — именно после этого события, произошедшего около 400 миллионов лет назад, на Земле могли остаться следы короткоживущего никеля-56.</p><p>Поэтому тем более интересно, что из этой стройной системы есть немало исключений. До 25% звезд главной последовательности являются <a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%B5%D0%BA%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D0%B0%D1%8F_%D0%B7%D0%B2%D0%B5%D0%B7%D0%B4%D0%B0" rel="noopener noreferrer nofollow">пекулярными</a> (от англ. «peculiar» - «странный»). Это означает, что спектральный анализ выявляет в них линии элементов, в том числе, гораздо тяжелее железа. Очевидно, состав этих звезд обусловлен спецификой их эволюции. Именно об этом мы поговорим далее.&nbsp; </p><p>Итак, Эддингтон изрядно упростил ситуацию ради афоризма. Звезда – сложный обогатительный комбинат, где сравнительно незамысловатые термоядерные реакции порождают целую цепочку легких элементов, начиная водородом и гелием, и заканчивая железом, марганцем, кобальтом и никелем. Стареющая звезда – это не костер, а скорее кузница. Но возможности ее ограничены: обычная звезда не может достичь такой степени сжатия, чтобы в ней в неследовых количествах образовывались элементы тяжелее железа. Это же означает, что в молодой звезде, активно переваривающей запасы водорода и гелия, железа будет мало. Но столь же верно, что повышение концентрации легких металлов в звезде должно свидетельствовать о ее скорой гибели.</p><p>Эта логичная картинка неожиданно потребовала пересмотра, когда в 1933 году молодой американский астроном Уильям Морган обнаружил звезду, в составе которой был явный избыток марганца. Марганец находится в таблице Менделеева под номером 25, то есть, непосредственно перед железом. Такой элемент звезда породить в состоянии. Но его обилие в составе звезды косвенно означает, что эволюция звезды близится к закату, а звезда, открытая Морганом, признаками старения не обладала.</p><p>С конца 40-х астрономы принялись усиленно изучать спектроскопию звезд, и обнаружили, что звезды с аномальным химическим составом встречаются на каждом участке Главной Последовательности. </p><p>Сначала принялись искать звезды, обладающие избытком марганца – и выяснилось, что они действительно встречаются нередко; таков, например, <a href="https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D1%8C%D1%84%D0%B5%D1%80%D0%B0%D1%86" rel="noopener noreferrer nofollow">Альферац</a>, альфа Андромеды. Но звезды, подобные Альферацу, богаты не только марганцем, но и ртутью. Ртуть же занимает в таблице Менделеева 80-ю клетку, она более чем вдвое тяжелее железа. Образоваться в звезде в ходе типичных ядерных реакций она никак не могла. </p><p>Дальше — больше. Оказалось, что химические странности звезд не ограничиваются содержанием тяжелых металлов. По каким-то причинам вышеприведенная цепочка изотопов сбивается, и некоторые звезды главной последовательности усиленно обогащаются бором, углеродом, кислородом и азотом (так называемые OBCN-звезды). Причем, такие звезды подразделяются на два подкласса: в OB-N повышено содержание азота, а в OB-C – содержание углерода. </p><p>Исследование таких звезд вывело астрофизиков на интересную закономерность: оказывается, почти все звезды подкласса OB-N являются двойными, то есть, обращаются вокруг общего центра масс:</p><figure class=""><img src="https://habrastorage.org/getpro/habr/upload_files/8c4/92e/47e/8c492e47e14d32bd6bd3fe1ad94750a3.gif" width="500" height="500"><figcaption></figcaption></figure><p>Таким образом, звездная пекулярность в некоторых случаях может быть связана с существованием двойных систем. В такой системе звезды могли бы вторично захватывать атомы легких элементов, например, из протопланетного облака. </p><p>Но вернемся к находкам Уильяма Моргана. Воодушевившись открытием ртутно-марганцевых звезд, он продолжал изучать ночное небо со спектрометром, и вскоре обнаружил другие классы пекулярных звезд. Именно Морган впервые описал марганцевые, хромовые, европиевые, циркониевые и кремниевые звезды. Позже эту классификацию немного обобщили: в наше время среди пекулярных звезд принято выделять 1) ртутно-марганцевые 2) европий-хром-циркониевые и 3) кремниевые звезды. </p><h2>Ртутно-марганцевые, бариевые и свинцовые звезды &nbsp;</h2><p>Именно к ним относится упомянутый выше Альферац из созвездия Андромеды, видимый невооруженным глазом (величина +2,6). С Земли Альферац кажется одиночной яркой звездой, но на самом деле это двойная звездная система:</p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/5a3/cbe/39c/5a3cbe39cf8a74792ad18b7ca081bf33.jpg" width="1024" height="686"><figcaption></figcaption></figure><p>Именно голубая звезда Альферац-А в этой паре является ртутно-марганцевой, а также содержит заметные количества европия, иттрия и платины. Другая известная <strong>двойная</strong> ртутно-марганцевая звезда Джиенах – гамма Ворона. Сейчас Джиенах еще является голубым гигантом, ему может оставаться несколько миллионов лет до превращения в красный гигант.</p><p>В 1970 появилось предположение, что образование пекулярных звезд в двойных системах может быть связано с гравитационным осаждением, а также с <a href="http://www.iki.rssi.ru/galeev/astro2007/tolstov.pdf" rel="noopener noreferrer nofollow">давлением&nbsp; излучения</a>: поскольку две звезды находятся очень близко друг от друга, на расстоянии меньшем одной астрономической единицы, взаимное облучение приводит к слипанию протонов (ядер водорода) в более крупные ядра. Именно таким образом в пекулярных звездах может образовываться сравнительно легкий марганец. Давление излучения может выталкивать тяжелые элементы из недр звезды наверх, в атмосферу – где мы и фиксируем необычные спектральные линии. Интересный побочный эффект – значительное усиление магнитного поля ртутно-марганцевой звезды, что также упрощает ее обнаружение.</p><p>Но ртутно-марганцевыми звездами картина не ограничивается. Еще в природе встречается немало бариевых и циркониевых звезд, а также есть звезды, богатые свинцом и висмутом. &nbsp;&nbsp;</p><p>В двойных системах, где белый карлик соседствует с голубым гигантом, вещество белого карлика может перетекать гигантскому соседу, в результате чего в голубом гиганте усиливаются линии бария (56 элемент). &nbsp;</p><p>Иные процессы приводят к накоплению небольших количеств свинца (82 элемент) в звездах, относящихся к группе «<a href="https://ru.wikipedia.org/wiki/%D0%90%D1%81%D0%B8%D0%BC%D0%BF%D1%82%D0%BE%D1%82%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B0%D1%8F_%D0%B2%D0%B5%D1%82%D0%B2%D1%8C_%D0%B3%D0%B8%D0%B3%D0%B0%D0%BD%D1%82%D0%BE%D0%B2" rel="noopener noreferrer nofollow">AGB</a>» (асимптотическая ветвь гигантов). Это огромные звезды, которые на диаграмме Герцшпрунга-Рассела (вынесена в качестве КДПВ к этой статье) считаются гигантами за счет высокой светимости, но температура их сравнительно невелика – многие из них относятся к спектральному классу <a href="https://wikipedia.tel/%D0%A1%D0%BF%D0%B5%D0%BA%D1%82%D1%80%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5_%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B_%D0%B7%D0%B2%D1%91%D0%B7%D0%B4" rel="noopener noreferrer nofollow">M, также S и C</a>.</p><p>Именно в асимптотической ветви гигантов был открыт <a href="https://nplus1.ru/news/2019/07/13/s-process" rel="noopener noreferrer nofollow">s-процесс</a>, то есть, медленное обрастание мелких атомов нейтронами с последующим превращением нейтронов в протоны. Таким образом, в пекулярных звездах тяжелые элементы могут образовываться в небольших количествах и без сверхновых и гиперновых событий. S-процесс протекает медленно и может приводить к образованию всех стабильных элементов и даже многих радиоактивных.&nbsp; &nbsp;&nbsp;&nbsp;</p><h2>Технециевые звезды</h2><p>После того, как в 1925 году Вальтер и Ида Ноддак получили чистый <a href="https://habr.com/ru/post/534224/" rel="noopener noreferrer nofollow">рений</a>, в доурановой части таблицы Менделеева пустовали всего две клетки. Это была клетка эка<strong>марганца</strong>, то есть, элемента № 43, и клетка № 61 – легкий лантаноид, который идет сразу после церия. Эти элементы, технеций (экамарганец) и прометий - существенно легче последних стабильных элементов, свинца и висмута (№ 82 и № 83) – но сами стабильных изотопов не имеют и в природе не встречаются. Дело в том, что сама конфигурация ядра у этих элементов неправильная, и поэтому они легко теряют протоны, превращаясь в другие простые вещества. Элемент № 43 был открыт в 1937 году Эмилио Сегре на Сицилии, когда отважный физик смог извлечь его из радиоактивных отходов от работы циклотрона Лоуренса.&nbsp;&nbsp;&nbsp; &nbsp;</p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/31c/cb3/a95/31ccb3a958ec62dd803621e874fc4d77.png" width="960" height="428"><figcaption></figcaption></figure><p>До 1937 года технеций в Солнечной системе практически отсутствовал. Даже ультраредкие астат (85) и франций (87) постоянно присутствуют в земной коре в количестве десятков граммов, поскольку являются побочным продуктом распада других изотопов, а технеция практически нет (при распаде одного грамма урана возникает порядка 1 пикограмма (1x10<sup>-12</sup> г) технеция). Дело в том, что технеций получается обогащением других изотопов, в первую очередь, молибдена – а также, как уже сказано выше, образуется в радиоактивных отходах в ядерном реакторе. Сегодня наша цивилизация ежегодно производит технеций килограммами, но период полураспада самых долгоживущих его изотопов <sup>98</sup>Tc и <sup>99</sup>Tc составляет считанные миллионы лет. Но s-процесс может приводить к образованию технеция в некоторых пекулярных звездах, относящихся к подгруппе циркониевых звезд. Спектральные линии технеция в циркониевых звездах еще в 1952 году <a href="https://thealphacentauri.net/75650-tehnecievye-zvezdy-element-kotoryy-est-tolko-v-zvezdah/" rel="noopener noreferrer nofollow">зафиксировал</a> американский астроном Меррилл Пол Уиллард. Технеций в больших количествах присутствует в атмосфере циркониевых звезд, например, этих: R Андромеды, U Кассиопеи, W Андромеды, R Близнецов. Соответственно, эти звезды действуют как настоящие ядерные реакторы, и технеций является в них не случайной примесью, а элементом жизненного цикла.</p><h2>Антизвезды </h2><p>Обзор химической пекулярности звезд был бы неполон без упоминания об <a href="https://naked-science.ru/article/astronomy/astronomy-obnaruzhili-vozmozhnye-zvezdy-iz-antimaterii" rel="noopener noreferrer nofollow">антизвездах</a>. </p><p>Одной из величайших загадок астрофизики является практически полное отсутствие антивещества во Вселенной. При этом теоретически антивещество должно было бы образоваться при Большом Взрыве в равной пропорции с обычным веществом. Соответственно, поскольку антивещество существует (элементарная античастица позитрон открыта в 1932 году) – преимущественно в виде антигелия, обнаруженного в космических лучах – должно быть объяснение, почему его настолько мало. Возможно, на заре существования Вселенной антивещество и вещество успели аннигилировать друг с другом – превратиться в фотоны – а вещество, наблюдаемое сегодня, является лишь небольшим избытком того первичного вещества, которому уже не с чем было аннигилировать.</p><p>В телескоп антивещество практически не должно отличаться от вещества, поскольку также испускает фотоны, а свет – это фотоны. Подсказкой могли бы послужить только акты аннигиляции, которые мы могли бы зафиксировать: при аннигиляции происходит выброс гамма-излучения в строго определенной узкой области спектра. Антивещество могло бы концентрироваться в виде настоящих антизвезд, а при столкновении с частицами вещества давать стабильный поток гамма-вспышек в этой области.    </p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/ed2/d1d/a16/ed2d1da16376e3dba46abd73dd7a05fd.png" width="1200" height="633"><figcaption></figcaption></figure><p>В 2021 году ученые из университета Тулузы под руководством Симона Дюпурке (Simon Dupourqué) нашли на небе 14 таких аномальных источников гамма-излучения. Пока эти наблюдения остаются чисто астрономическими, а не астрофизическими — то есть, хорошо было бы поймать космические лучи от звезд-кандидатов и посмотреть, из чего они состоят. Аннигиляционное топливо было бы самым мощным и при этом компактным источником энергии для межзвездных перелетов (корабль «ЗАРЯ» из фильма «<a href="https://habr.com/ru/post/148429/" rel="noopener noreferrer nofollow">Москва-Кассиопея</a>» — это «звездолет аннигиляционный релятивистский ядерный»). При этом мы пока не представляем, как можно было бы добывать антивещество в промышленных или вообще макроскопических количествах. Добыча крупиц антивещества в почтительном отдалении от антизвезды – отличный сюжет для голливудского блокбастера. Поэтому остается надеяться, что открытие французов когда-нибудь приведет нас к его неисчерпаемым и недостижимым залежам.</p><h2>Заключение</h2><p>Надеюсь, мне удалось продемонстрировать, насколько преждевременным и наивным было утверждение Артура Эддингтона, вынесенное в начало этой статьи. Порой звезда – это не водородно-гелиевый костер, а сложный ядерный реактор, возможно, даже концептуальная модель для создания искусственного астрофизического реактора, который, будучи окружен магнитными полями, мог бы походить на… пекулярную звезду. Поэтому завершу эту статью я другим афоризмом, <a href="https://esquire.ru/rules/5312-isaac-asimov/" rel="noopener noreferrer nofollow">принадлежащим</a> Айзеку Азимову: «<strong>Самая волнующая фраза,</strong>&nbsp;какую можно услышать в&nbsp;науке,&nbsp;— вовсе не&nbsp;«эврика!», а&nbsp;«вот это забавно»». Или, добавим мы, «…пекулярно».</p></div>\n' +
                '      \n' +
                '    </div>',
            imageUrl: 'https://habrastorage.org/getpro/habr/upload_files/e91/1e6/bbd/e911e6bbd0e024cbfd49a1fed9f1ae66.jpg',
            karma: 2,
            tags: [{id: 1, title: 'Астрономия'}, {id: 2, title: 'Химия'}],
            user: {
                id: 1,
                firstName: 'Oleg',
                lastName: 'Sivchenko',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/27b/f35/f6f/27bf35f6f595fc136b70c384752ba387.jpg',
                login: 'OlegSivchenko'
            },
            bookmarked: true
        },
        {
            id: 2,
            title: 'Термоядерный синтез все реальнее: MAST, EAST и ITER, дейтерий-тритиевые эксперименты и другие достижения',
            countBookmarks: 10,
            countComments: 4,
            countViews: 20,
            creationTime: new Date('December 19, 2021 04:21:00'),
            text: '<div class="post__text post__text-html post__text_v1" id="post-content-body"><div style="text-align:center;"><img src="https://habrastorage.org/webt/r0/ps/3d/r0ps3dlk-yoq2ydh-k_kbswuvni.jpeg"></div><br>\n' +
                'Термоядерные реакторы существуют десятки лет, но управляемая термоядерная реакция все это время оставалась недостижимой. Она постоянно находилась в ближайшем будущем, ученые говорили: «Через 10 лет, скорее всего, мы достигнем успеха». Но проходило десять лет, и ничего не менялось — по-прежнему публиковались научно-популярные статьи, где говорилось все о том же сроке в 10 лет.<br>\n' +
                '<br>\n' +
                'Сейчас, насколько можно судить, мнiогое изменилось — разработчики термоядерных установок достигли действительно заметных успехов. Речь идет как о новых реакторах, так и об уже существующих. В целом, вероятность того, что управляемый термоядерный синтез станет реальностью в течение ближайших нескольких лет, достаточно высокая. Давайте оценим успехи ученых последних лет и посмотрим, что там планируется. <br>\n' +
                '<a name="habracut"></a><br>\n' +
                '<font color="#EB4247"><h3>Модернизированный сферический токамак MAST возобновил работу</h3></font><br>\n' +
                'В конце мая снова начал работу сферический токамак MAST (Mega Ampere Spherical Tokamak). Камера у этой установки не очень большая — диаметр 4 метра. Последние несколько месяцев систему модифицировали, включая оптимизацию систему охлаждения плазмы до ее сброса. Возможно, этот реактор послужит прототипом для небольших, но эффективных систем будущего. <br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/os/oi/0v/osoi0v77ron5mw3m1zjuaojmr-w.jpeg"></div><br>\n' +
                'К слову, сам токамак из Британии совсем не нов — его сборка стартовала в 1997 году, а работать он начал два года спустя. Проблемой стал небольшой размер камеры — из-за этого разогретая свыше сотни млн кельвинов плазма разрушала вольфрамовые плитки. <br>\n' +
                '<br>\n' +
                'В 2013 году команда поняла, что установку нужно модернизировать. Правительство выделило деньги, около 55 млн фунтов, и началась реконструкция. Завершена она была лишь в октябре 2020 года, после чего последовал период тестирования. Токамак подвергся многочисленным проверкам, и лишь в 2021 году его приняли в эксплуатацию.<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/f2/wc/9u/f2wc9udv4t-yh1unjjskekakjbu.jpeg"></div><br>\n' +
                'В итоге проблемы разрушения плиток удалось избежать. А плазма теперь при сбросе понижает температуру с сотни млн °C до всего 300 °C. <br>\n' +
                '<br>\n' +
                'В прошлом году британские физики начали работу над еще одним проектом — токамаком STEP (Spherical Tokamak for Energy Production). <br>\n' +
                '<br>\n' +
                '<font color="#EB4247"><h3>Проект ITER продвигается к завершению</h3></font><br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/7y/ox/sn/7yoxsnjol_a-uz-cushj33uhu_s.jpeg"></div><br>\n' +
                'В прошлом году в исследовательском центре Кадараш во Франции стартовало строительство экспериментальной термоядерной установки ITER, реактор начали собирать из подготовленных ранее компонентов. Это масштабный проект, в котором принимают участие специалисты из самых разных стран, включая ЕС, Индию, Китай, Южную Корею, Россию, США и Японию. <br>\n' +
                '<br>\n' +
                'Реактор представляет собой цилиндр диаметром 28 метров, высотой 29 метров и весом 23 000 тонн. Размещается система в железобетонном объекте с длиной 120 метров, шириной 80 метров и высотой 80 метров. <br>\n' +
                '<br>\n' +
                'Несмотря на некоторые проблемы, проект постепенно продвигается к завершению. Через четыре года разработчики планируют получить первую плазму. В течение десяти лет ученые будут проводить эксперименты, подводя работу к главному результату — получению управляемой термоядерной реакции. <br>\n' +
                '<br>\n' +
                'Если все пройдет хорошо, то где-то в 2035 году появятся первые коммерческие реакторы DEMO. <br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/ct/al/bg/ctalbgfvunvds2mdegqtsms-cmc.jpeg"></div><br>\n' +
                'Этим летом (т.е. 2021 г.) проводятся эксперименты с новой смесью для термоядерного реактора ITER. Речь идет о дейтерий-тритиевой смеси, которая будет использоваться в качестве основного «топлива» для реактора". Испытания смеси будут проходить в Великобритании на площадке JET (Joint European Torus — Объединенный европейский токамак).<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/va/za/dz/vazadzx-hbuwgaycjc3_smexbvo.jpeg"></div><br>\n' +
                'Этот реактор — работающая модель ITER с размером в 1/10 от размера полномасштабной установки. Если все пройдет хорошо с JET — значит, не должно быть проблем и с его «старшим братом». Эксперименты JET позволят увидеть, как будет вести себя плазма и какие сложности могут возникнуть. В ходе испытаний ученые используют не более 60 гр трития при температуре плазмы в 150 млн К — именно такая температура требуется для старта синтеза. <br>\n' +
                '<br>\n' +
                'У JET весьма неплохие показатели — отношение затраченной на разогрев плазмы энергии к полученной энергии составляет 0,67. Для того, чтобы получить коммерческую систему, этот коэффициент, Q, должен быть больше единицы. Для того, чтобы отбить затраты и стать экономически выгодным проектом, Q должен быть равным или превышать 25. Авторы проекта ITER считают, что его Q будет не менее 10. <br>\n' +
                '<br>\n' +
                '<font color="#EB4247"><h3>EAST ставит рекорды</h3> </font><br>\n' +
                'Как уже <a href="https://habr.com/ru/news/t/561204/">писали на Хабре</a>, китайским ученым удалось побить рекорд корейцев по удержанию сверхгорячей плазмы. Команда термоядерного реактора EAST смогла добиться невиданных доселе результатов — удержания плазмы с температурой 160 млн К в течение 20 секунд. Плазму с температурой в 120 млн К они удерживали 101 секунду. Это уже очень близко к порогу термоядерного синтеза — речь идет не о долях секунды, а о десятках секунд. <br>\n' +
                '<br>\n' +
                'Для того, чтобы началась непрерывная реакция термоядерного синтеза в установке с получением энергии, плазму температурой в 150 млн К нужно удерживать около 300-400 секунд. <br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/yl/k0/ja/ylk0ja123l2calcqlepl8cbczvo.jpeg"></div><br>\n' +
                'EAST — тоже токамак, отличающийся от большинства похожих конструкций наличием полностью сверхпроводящей магнитной системы на основе ниобий-титановых проводников. При этом большой радиус камеры составляет всего 1,7 метра, то есть диаметр даже меньше, чем у британской установки, о которой говорилось выше — 3,4 метра вместо 4. И проблем с разрушением вольфрамовых плиток, насколько можно судить, у китайцев нет. <br>\n' +
                '<br>\n' +
                '<font color="#EB4247"><h3>Стелларатор W7-X</h3></font><br>\n' +
                'Кроме токамаков, есть и термоядерные установки с иной конфигурацией. Например, стеллараторы. Форма магнитной катушки таких установок как бы повторяет конфигурацию нагретой плазмы, что позволяет не бороться с плазмой, а просто использовать ее особенности. <br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/a9/zu/yv/a9zuyv_qx8kuyrs5wy8l383nugq.jpeg"></div><br>\n' +
                'Установка Wendelstein 7-X (W7-X) — современный стелларатор, построенный по последнему слову термоядерных технологий. Конструкция стелларатора постепенно оптимизируется, в планах создателей — обеспечить работу системы вплоть до 30 минут, что, конечно, гораздо лучше любых рекордов токамаков. <br>\n' +
                '<br>\n' +
                'Wendelstein 7-X (W7-X) предназначен, в первую очередь, быть proof of concept, показав жизнеспособность конструкции — получать энергию с его помощью не планируется. К сожалению, из-за пандемии эксперименты с системой отложены минимум на год. Работа возобновится не ранее следующего года. <br>\n' +
                '<br>\n' +
                '<font color="#EB4247"><h3>Осторожный оптимизм </h3></font><br>\n' +
                'Несмотря на все эти успехи, все равно не стоит считать, что термояд уже у человечества в кармане. Предстоит решить еще очень много проблем, причем в будущем могут возникнуть новые.<br>\n' +
                '<br>\n' +
                'Тем не менее, сейчас ученые достигли немалых успехов, изучением возможностей термоядерного синтеза заняты ученые многих стран. Это уже не парочка проектов, как пару десятков лет назад. При этом регулярно появляются новые системы — как токамаки, так и альтернативы. <br>\n' +
                '<br>\n' +
                'Китайская установка вселяет уверенность в том, что цели, которые ставят перед собой ученые, будут решены в ближайшем будущем. При этом есть надежда и на ITER с его дейтерий-тритиевым «топливом». <br>\n' +
                '<br>\n' +
                'Если W7-X покажет хорошие результаты — кто знает, может, именно стеллараторы вырвут победу, а токамаки останутся позади. <br>\n' +
                '<br>\n' +
                'В любом случае, термоядерный синтез привлек внимание не только ученых, но и правительств крупнейших государств мира. И вряд ли это внимание, интерес, ослабнут. Скорее наоборот — будут лишь усиливаться. <br>\n' +
                '<br>\n' +
                '<a href="https://slc.tl/kKUGH"><div style="text-align:center;"><img src="https://habrastorage.org/webt/1h/dq/mj/1hdqmj1bvguax5hnugdz0ci_jbw.jpeg"></div></a></div>',
            imageUrl: 'https://habrastorage.org/webt/r0/ps/3d/r0ps3dlk-yoq2ydh-k_kbswuvni.jpeg',
            karma: 2,
            tags: [{id: 3, title: 'будущее'}, {id: 4, title: 'энергетика'}],
            user: {
                id: 2,
                firstName: 'Deluar',
                lastName: 'Vachenko',
                imageUrl: 'https://cdn.profile.ru/wp-content/uploads/2020/03/shutterstock_754674145.jpg',
                login: 'Deluar'
            },
            bookmarked: false
        },
        {
            id: 3,
            title: 'Алюминиевый профиль как универсальный ресурс для сборки чего угодн',
            countBookmarks: 1,
            countComments: 1,
            countViews: 29,
            creationTime: new Date('December 29, 2021 04:21:00'),
            text: '<div class="post__text post__text-html post__text_v1" id="post-content-body"><div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/c52/910/20f/c5291020fa36fdfb0383786f8f9e18ab.jpg"></div><br>\n' +
                'Еще недавно профиль типа Т-слот (T-slot) был не самым популярным, но после того, как его стали применять в конструкции многих моделей 3D-принтеров, он появился везде и всюду. Теперь он используется для сборки тех же 3D-принтеров, лазерных резаков, станков с ЧПУ. <br>\n' +
                '<br>\n' +
                'Кроме того, профиль подходит для изготовления верстаков, осветительных приборов, даже рамок для фотографий, если, конечно, такая мысль возникнет. Давайте чуть изучим возможности профиля и посмотрим, для чего, кроме чисто строительных нужд, его можно применять. В первой части рассматриваются особенности профиля и соединений.<br>\n' +
                '<a name="habracut"></a><br>\n' +
                '<font color="#EB4247"><h3>Почему профиль удобен? </h3></font><br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/491/f96/682/491f96682038998a6452039e235e0472.jpg"></div><br>\n' +
                'В общем-то, если у вас прямые руки, то можно строить нужные конструкции из чего угодно, включая дерево, арматуру или обычный алюминий. Профиль же хорош тем, что он относительно недорогой и без проблем поддается модификациям. Все, что нужно мастеру — устройство для разрезания профиля и дрель для сверления отверстий в нем. Возможно, пригодится еще и приспособление для нарезания внутренней резьбы — иногда это нужно. Имея все это, можно собрать, что угодно — от мелких конструкций до масштабных систем. <br>\n' +
                '<br>\n' +
                'Но одного профиля недостаточно — нужны еще специфические запчасти вроде креплений, гаек, болтов, стяжек и прочих аксессуаров. Большим плюсом является наличие в хозяйстве 3D-принтера — многие необходимые элементы можно распечатать самостоятельно.<br>\n' +
                '<br>\n' +
                '<font color="#EB4247"><h3>Типы профилей и их особенности</h3></font><br>\n' +
                'Говоря о «профиле» мы подразумеваем одновременно несколько типов изделий из алюминия с разной геометрией. Чаще всего встречается профиль в форме квадрата или прямоугольника. Наиболее распространенная разновидность — профиль с квадратным сечением, продольным отверстием в центре и Т-образными пазами для «подключения» самых разных объектов. <br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/10b/30f/538/10b30f5384ba4cb35c89096181a015b0.png"></div><br>\n' +
                'Кстати, есть профили, изготовляемые по метрической системе, есть — по имперской. Называют профиль (в данном случае квадратный) по его размерности. Например, квадратный профиль с длиной стороны 20мм будет называться профиль 20Х20. Официально такой профиль называется «алюминиевый станочный профиль 20Х20».<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/824/14c/a4d/82414ca4d173c1b888e628de883b0f14.png"></div><br>\n' +
                'Конечно, есть и другие формы профиля, некоторые из них весьма экзотические. Есть профили с полукруглым корпусом, есть — с треугольным. У каждой формы — собственное предназначение, все зависит от цели мастера и проекта. Пример такого проекта — ниже. Авторы его, семейная пара, собрали шикарный стол из профиля и ДСП. <br>\n' +
                '<br>\n' +
                '<div class="oembed"><iframe allowfullscreen="" id="60bcc4eb8eee42c616d9c9a9" src="https://embedd.srv.habr.com/iframe/60bcc4eb8eee42c616d9c9a9" height="453"></iframe></div><br>\n' +
                '<font color="#EB4247"><h3>Крепление к профилю</h3></font><br>\n' +
                'Чаще всего аксессуары вроде ножек или кронштейнов крепятся к профилю при помощи болтов и гаек, которые вставляются в пазы. Для крепления у мастера должен быть доступ к открытому концу паза профиля. Если нужно вставить дополнительный аксессуар между двумя другими гайками или паз заблокирован кронштейном, дело чуть усложняется — придется конструкцию разбирать. Правда, такие вопросы решаются и при помощи Т-гайки, это популярный крепежный элемент, который обеспечивает надежное соединение в любом профиле в системах из любых материалов. Об этом — ниже.<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/3b5/5b8/12c/3b55b812c45e0cd5ebfc862791ada3df.jpg"></div><br>\n' +
                'Проще всего сразу вкрутить болт в кронштейн, навернуть гайку, потом вставить конструкцию в паз профиля, установить на место и потом уже закрутить гайку. Здесь стоит учитывать длину болта — она должна быть такой, чтобы пройти через кронштейн и гайку, не касаясь профиля с другой стороны. Например, если толщина кронштейна 10мм, толщина гайки — 6мм, то длина болта в идеале должна составлять 15 мм. Если болт будет слишком коротким, то закрепить деталь надежно не удастся, более того, гайка может просто соскочить в самый неожиданный момент. <br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/3bc/809/47c/3bc80947c8ac1317c4d5e11f7b4cbb52.jpg"></div><br>\n' +
                'Что касается T-гаек, то у них есть большое преимущество по сравнению с любыми другими. Если оба конца профиля уже заняты или по какой-либо другой причине вставить крепление в паз с открытого конца нельзя, приходит на помощь Т-гайка. Она входит в паз без проблем, а затем, при закручивании болта, поворачивается на 90 градусов и застревает в пазу. Есть специализированные гайки с пружинами или установочными винтами. Есть и болты с Т-образной головкой.<br>\n' +
                '<br>\n' +
                '<font color="#EB4247"><h3>Соединение профилей между собой</h3></font><br>\n' +
                'При необходимости концы профилей можно надежно закрепить друг с другом при помощи специальных коннекторов. Большинство вариантов соединений показаны вот в этом видео:<br>\n' +
                '<br>\n' +
                '<div class="oembed"><iframe allowfullscreen="" id="60bcc4eb864b97c5e1be87cf" src="https://embedd.srv.habr.com/iframe/60bcc4eb864b97c5e1be87cf" height="453"></iframe></div><br>\n' +
                'Крепления для профилей выполняются из алюминия или стали. Если есть возможность, их можно и распечатать на 3D-принтере, учитывая, конечно, цели и особенности каждого крепления. <br>\n' +
                '<br>\n' +
                'В простейшем случае нужно просто соединить профиль при помощи линейного соединителя — полоски металла, которая вставляется в прорезь (слот).<br>\n' +
                '<br>\n' +
                'Еще концы профилей можно закрепить без использования креплений. В этом случае используется болт, для чего требуется высверлить отверстия в закрепляемых профилях, вставить болт и затянуть его. <br>\n' +
                '<br>\n' +
                '<font color="#EB4247"><h3>Аксессуары</h3></font><br>\n' +
                'Их огромное количество, продаются они там же, где и профили. Есть накладки, ножки, ролики, пружины, ручки и петли, равно, как и другие элементы. На любом сайте 3D-печати есть файлы как этих, так и любых других элементов для крепежей. Это могут быть держатели катушек, держатели для инструментов, лампы и т.п. <br>\n' +
                '<br>\n' +
                'Главное, о чем нужно помнить, используя подобный элемент — для его закрепления нужна гайка, так что распечатайте или закупите достаточное их количество. <br>\n' +
                '<br>\n' +
                '<font color="#EB4247"><h3>Где достать профиль? </h3></font><br>\n' +
                'Профиль можно купить во многих строительных и/или специализированных магазинах. Если есть возможность разрезать профиль, то лучше купить набор новых профилей, затем разрезав их по чертежу/схеме. В некоторых магазинах/мастерских вам могут нарезать профиль так, как нужно — естественно, за деньги. <br>\n' +
                '<br>\n' +
                '<font color="#EB4247"><h3>Немного о 3D-печати креплений</h3></font><br>\n' +
                'Кронштейны и крепления можно печатать на принтере, о чем говорилось выше. Если есть достаточное количество пластика, можно распечатать и сам профиль. Т-гайки, о которых говорилось выше, тоже можно печатать. <br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/903/15f/c17/90315fc17ac487bd2b979db94f3432d3.jpg"></div><br>\n' +
                'Но здесь нужно быть осторожным. Каким бы хорошим и качественным ни был бы ваш принтер, пластиковые элементы никогда не будут такими же прочными, как металлические. <br>\n' +
                '<br>\n' +
                'Еще один нюанс — профили от разных производителей могут чуть отличаться, поэтому и крепления для них будут другими. Крепление от производителя Х могут не подходить к профилям производителя Y. <br>\n' +
                '<br>\n' +
                'В следующей статье расскажем и покажем, что можно сделать из профиля, учитывая информацию, изложенную здесь. <br>\n' +
                '<br>\n' +
                '<a href="https://slc.tl/RIA1E"><img src="https://habrastorage.org/webt/pe/ay/zf/peayzfh745-twugmjk-r2zg-plc.png"></a></div>',
            imageUrl: 'https://habrastorage.org/getpro/habr/post_images/c52/910/20f/c5291020fa36fdfb0383786f8f9e18ab.jpg',
            karma: 19,
            tags: [{id: 5, title: 'конструкции'}, {id: 6, title: 'алюминий'}],
            user: {
                id: 3,
                firstName: 'ALex',
                lastName: 'Selectel',
                imageUrl: 'https://www.passion.ru/thumb/0x600/filters:quality(75)/imgs/2017/05/12/14/787219/76c0f20dcf1a80a446674ec6677a681084ff2b38.jpg',
                login: 'ALexSelectel'
            },
            bookmarked: true
        },
        {
            id: 4,
            title: 'Актуальность принципов SOLID',
            countBookmarks: 11,
            countComments: 12,
            countViews: 1,
            creationTime: new Date('September 29, 2021 04:21:00'),
            text: '<div class="post__text post__text_v2" id="post-content-body"><p>Впервые принципы SOLID были представлены в 2000 году в статье <a href="https://web.archive.org/web/20150906155800/http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf" rel="noopener noreferrer nofollow"><u>Design Principles and Design Patterns</u></a> Роберта Мартина, также известного как Дядюшка Боб.&nbsp;</p><p>С тех пор прошло два десятилетия. Возникает вопрос - релевантны ли эти принципы до сих пор?&nbsp;</p><p>Перед вами перевод <a href="https://blog.cleancoder.com/uncle-bob/2020/10/18/Solid-Relevance.html" rel="noopener noreferrer nofollow"><u>статьи</u></a> Дядюшки Боба, опубликованной в октябре 2020 года, в которой он рассуждает об актуальности принципов SOLID для современной разработки.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>Недавно я получил письмо с примерно следующими соображениями:</p><p><em>Годами знание принципов SOLID было стандартом при найме. От кандидатов ожидалось уверенное владение этими принципами. Однако позже один из наших менеджеров, который уже почти не пишет код, усомнился, разумно ли это. Он утверждал, что принцип открытости-закрытости стал менее важен, так как по большей части мы уже не пишем код для крупных монолитов. А вносить изменения в компактные микросервисы - безопасно и просто.</em></p><p><em>Принцип подстановки Лисков давно устарел, потому что мы уже не уделяем столько внимания наследованию, сколько уделяли 20 лет назад. Думаю, нам стоит рассмотреть </em><a href="https://speakerdeck.com/tastapod/why-every-element-of-solid-is-wrong" rel="noopener noreferrer nofollow"><em><u>позицию Дена Норса</u></em></a><em> о SOLID - “Пишите простой код”</em></p><p>В ответ я написал следующее письмо.</p><p>Принципы SOLID сегодня остаются такими же актуальными, как они были 20 лет назад (и до этого). Потому что программное обеспечение не особо изменилось за все эти годы, а это в свою очередь следствие того, что программное обеспечение не особо изменилось с 1945 года, когда Тьюринг написал первые строки кода для электронного компьютера. Программное обеспечение - это все еще операторы <code>if</code>, циклы <code>while</code> и операции присваивания - <em>Последовательность, Выбор, Итерация</em>.&nbsp;&nbsp;&nbsp;&nbsp;</p><p>Каждому новому поколению нравится думать, что их мир сильно отличается от мира поколения предыдущего. Каждое новое поколение ошибается в этом, о чем они узнают, как только появляется следующее поколение, чтобы сказать им, насколько все изменилось. &lt;смешок&gt;</p><p>Итак, пройдемся по принципам по порядку.&nbsp;</p><p><strong>SRP - Single Responsibility Principle</strong> Принцип единственной ответственности.</p><p><em>Объединяйте вещи, изменяющиеся по одним причинам. Разделяйте вещи, изменяющиеся по разным причинам.&nbsp;</em></p><p>Трудно представить, что этот принцип не релевантен при разработке ПО. Мы не смешиваем бизнес-правила с кодом пользовательского интерфейса. Мы не смешиваем SQL-запросы с протоколами взаимодействия. Код, меняющийся по разным причинам, мы держим отдельно, чтобы изменения не сломали другие части. Мы следим, чтобы модули, которые изменяются по разным причинам, не включали запутывающих зависимостей.&nbsp;&nbsp;</p><p>Микросервисы не решают эту проблему. Вы можете создать запутанный микросервис или запутанное множество микросервисов, если смешаете код, который изменяется по разным причинам.&nbsp;</p><p>Слайды Дена Норса полностью упускают этот момент и убеждают меня в том, что он вообще не понимает сам принцип (либо иронизирует, что более вероятно предположить, зная Дена). Его ответ на SRP - “Пишите простой код”. Я согласен. SRP - один из способов сохранять код простым.&nbsp;&nbsp;</p><p><strong>OSP - Open-Closed Principle</strong> Принцип открытости-закрытости</p><p><em>Модуль должен быть открытым для расширения, но закрытым для изменения.</em>&nbsp;</p><p>Мысль о том, что из всех принципов кто-то может подвергнуть сомнению этот, наполняет меня ужасом за будущее нашей отрасли. Конечно, мы хотим создавать модули, которые можно расширять, не изменяя их. Можете ли вы представить себе работу в зависимой от устройства системе, где запись в файл на диске принципиально отличается от вывода на принтер, печати на экран или записи в канал? Хотим ли мы видеть операторы <code>if</code>, разбросанные по всему коду, и вникать сразу во все мельчайшие детали?</p><p>Или... хотим ли мы отделить абстрактные понятия от деталей реализации? Хотим ли мы изолировать бизнес-правила от надоедливых мелких деталей графического интерфейса, протоколов связи микросервисов и тонкостей поведения различных баз данных? Конечно хотим!</p><p>И снова <a href="https://speakerdeck.com/tastapod/why-every-element-of-solid-is-wrong?slide=7" rel="noopener noreferrer nofollow"><u>слайд</u></a> Дэна преподносит это совершенно неправильно.</p><p><em>(Примечание. На слайде Ден утверждает, что при изменении требований существующий код становится неверным, и его нужно заменить на работающий)</em></p><p>При изменении требований неверна только <em>часть</em> существующего кода. Бóльшая часть существующего кода по-прежнему верна. И мы хотим убедиться, что нам не нужно менять правильный код только для того, чтобы снова заставить работать неправильный. Ответ Дэна - “Пишите простой код”. И снова я согласен. По иронии, он прав. <em>Простой код одновременно открыт и закрыт.</em></p><p><strong>LSP - Liskov Substitution Principle</strong> Принцип подстановки Лисков</p><p><em>Программа, использующая интерфейс, не должна путаться в реализациях этого интерфейса.</em>&nbsp;</p><p>Люди (включая меня) допустили ошибку, полагая что речь идет о наследовании. Это не так. Речь о подтипах. Все реализации интерфейсов являются подтипами интерфейса, в том числе при утиной типизации. Каждый пользователь базового интерфейса, объявлен этот интерфейс или подразумевается, должен согласиться с его смыслом. Если реализация сбивает с толку пользователя базового типа, то будут множиться операторы <code>if/switch</code>.</p><p>Этот принцип - о сохранении абстракций четкими и хорошо определенными. Невозможно вообразить такую концепцию устаревшей.</p><p>Слайды Дэна по этой теме полностью верны, он просто упустил суть принципа. Простой код - это код, который поддерживает четкие отношения подтипов.</p><p><strong>ISP - Interface Segregation Principle</strong> Принцип разделения интерфейса</p><p><em>Интерфейсы должны быть краткими, чтобы пользователи не зависели от ненужных им вещей.&nbsp;&nbsp;</em></p><p>Мы по-прежнему работаем с компилируемыми языками. Мы все еще зависим от дат изменений, чтобы определить, какие модули должны быть перекомпилированы и перевыпущены. Покуда это справедливо, нам придется столкнуться с проблемой - когда модуль A зависит от модуля B во время компиляции, но не во время выполнения, изменения в модуле B ведут к перекомпиляции и перевыпуску модуля A.</p><p>Проблема особенно остро стоит в статически типизированных языках, таких как Java, C#, C++, GO, Swift и т.д. Динамически типизированные языки страдают гораздо меньше, но тоже не застрахованы от этого - существование Maven и Leiningen тому доказательство.&nbsp;</p><p><a href="https://speakerdeck.com/tastapod/why-every-element-of-solid-is-wrong?slide=13" rel="noopener noreferrer nofollow"><u>Слайд</u></a> Дэна на эту тему ошибочен. </p><p><em>(Примечание. На слайде Ден обесценивает утверждение “Клиенты не должны зависеть от методов, которые они не используют” фразой “Это же и так правда!!”)</em></p><p>Клиенты <em>зависят</em> от методов, которые они <em>не вызывают</em>, если нужно перекомпилировать и перевыпускать клиент при изменении одного из этих методов. <a href="https://speakerdeck.com/tastapod/why-every-element-of-solid-is-wrong?slide=14" rel="noopener noreferrer nofollow"><u>Финальное замечание</u></a> Дэна по этому принципу в целом справедливо.&nbsp;</p><p><em>(Примечание. Речь о фразе “Если классу нужно много интерфейсов - упрощайте класс!”)</em></p><p>Да, если вы можете разбить класс с двумя интерфейсами на два отдельных класса, то это хорошая идея (SRP). Но такое разделение часто недостижимо и даже нежелательно.</p><p><strong>DIP - Dependency Inversion Principle</strong> Принцип инверсии зависимостей</p><p><em>Направляйте зависимости согласно абстракциям. Высокоуровневые модули не должны зависеть от низкоуровневых деталей.</em></p><p>Сложно представить архитектуру, которая активно не использовала бы этот принцип. Мы не хотим зависимости бизнес-правил высокого уровня от низкоуровневых деталей. Это, надеюсь, совершенно очевидно. Мы не хотим, чтобы вычисления, которые приносят нам деньги, были замусорены SQL-запросами, проверками низкого уровня или проблемами форматирования. Мы хотим изолировать абстракции высокого уровня от низкоуровневых деталей. Это разделение достигается за счет аккуратного управления зависимостями внутри системы, чтобы все зависимости исходного кода, особенно те, которые пересекают архитектурные границы, указывали на абстракции высокого уровня, а не на низкоуровневые детали.</p><p>В каждом случае слайды Дена заканчиваются фразой “Пишите простой код”. Это хороший совет. Однако если годы и научили нас чему-то, так это тому, что простота требует дисциплины, руководствующейся принципами. Именно эти принципы определяют простоту. Именно эта дисциплина заставляют программистов создавать простой код.</p><p>Лучший способ создать путаницу - сказать всем “будьте проще” и не дать никаких дальнейших инструкций.&nbsp;</p></div>',
            imageUrl: 'https://habrastorage.org/webt/ky/jk/lc/kyjklcgdkx2rxgcbrfxbnnofjqu.png',
            karma: 19,
            tags: [{id: 7, title: 'solid'}, {id: 8, title: 'архитектурные паттерны'}],
            user: {
                id: 4,
                firstName: 'Kiril',
                lastName: 'Barchuk',
                imageUrl: 'https://img.freepik.com/free-photo/handsome-confident-smiling-man-with-hands-crossed-on-chest_176420-18743.jpg?size=626&ext=jpg',
                login: 'KirilBarchuk'
            },
            bookmarked: false
        },
        {
            id: 5,
            title: 'UML умер, а никто и не заметил?',
            countBookmarks: 0,
            countComments: 2,
            countViews: 13,
            creationTime: new Date('September 11, 2021 09:29:00'),
            text: '<div class="post__text post__text-html post__text_v1" id="post-content-body"><div style="text-align:center;"><img src="https://habrastorage.org/webt/go/re/vg/gorevgjqipvqgbxecrd6mnxzqxw.jpeg"></div><br>\n' +
                '<i>UML, нам будет тебя не хватать</i><br>\n' +
                '<br>\n' +
                '<a href="http://uml.org/">Unified Modelling Language (UML)</a>, разработанный Rational Software и принятый в качестве стандарта Object Management Group (OMG) в 1997 году, призван был стандартизировать множество различных типов графических нотаций, принятых в отрасли разработки ПО.<br>\n' +
                '<br>\n' +
                'Моя история отношений с UML началась почти десяток лет назад, когда я стал евангелистом этого языка как <em>моста между ИТ и бизнесом</em>. Я никогда не был полностью убеждён в ценности UML как нотации для моделирования конкретных программных продуктов; моя цель заключалась в использовании UML для описания требуемых структурных и поведенческих свойств, ожидаемых от проектируемой системы.<br>\n' +
                '<a name="habracut"></a><br>\n' +
                'Откровением для меня стала формальная семантика, связанная с UML Activity Diagrams. Я не мог терпеть неформальные схемы Visio из-за множества неопределённостей в них. Например, что означают две стрелки, исходящие их прямоугольника: выбор или разделение потока на два параллельных пути? Аналогичный пример: две стрелки, указывающие на один прямоугольник, означают, что действие начинается сразу после достижения первым потоком прямоугольника? А может, это OR, XOR или AND? В общем, смысл вы поняли. UML решает эту проблему благодаря введению чёткой и недвусмысленной семантики.<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/h2/5_/dq/h25_dqq6lw54f9brlxb4kq1rzvm.jpeg"></div><br>\n' +
                '<i>Игра была нечестной изначально: правильного ответа нет</i><br>\n' +
                '<br>\n' +
                'Я по-настоящему вкладывал душу в UML:<br>\n' +
                '<br>\n' +
                '<ul>\n' +
                '<li>Я чертил схемы для собственных решений с 2004 по 2015 годы для семи разных работодателей и клиентов почти исключительно с помощью UML.</li>\n' +
                '<li>Я проводил буткемпы по UML (для бизнес-аналитиков) у двух крупных клиентов.</li>\n' +
                '<li>В качестве кандидатской диссертации я определил ключевое множество дискретной математики, являющееся фундаментом для большинства структурных и поведенческих моделей UML. Я даже написал на Haskell инструмент на основе GraphViz для визуализации этой математики в графическом UML.</li>\n' +
                '</ul><br>\n' +
                'Спустя несколько лет, примерно в 2015 году, я осознал, что практически перестал пользоваться UML, как и остальные мои коллеги, а также почти все клиенты из списка Fortune 500, которых я консультировал в последнее время. Что же произошло?<br>\n' +
                '<br>\n' +
                'Я знаю: это была смерть от тысячи порезов. И нет, UML не убило бизнес-сообщество из-за его сложности или строгости. Напротив, людям из бизнеса нравилась возможность чётких и недвусмысленных коммуникаций при помощи нескольких новых символов. Айтишники возвысили UML (в своё время этим занимался и я), и они же стали причиной его падения.<br>\n' +
                '<br>\n' +
                'Но жертвой стал не UML сам по себе. Если откровенно, UML стал просто побочной потерей. Настоящая резня развернулась в сфере разработки требований, включающей в себя бизнес-аналитику и проектирование. Убийцей стал Agile, а его отравленными стрелами были user stories.<br>\n' +
                '<br>\n' +
                'В модели, куда на входе засовывают user stories, а на выходе получают демо (или feature production release), больше нет места для содержательного структурного анализа задач.<br>\n' +
                '<br>\n' +
                'В современном дивном новом мире понимание напрямую кристаллизуется в код, готовый к продакшену. Даже моделирование бизнес-структур, по сути, было убито родственной Agile дисциплиной: Domain Driven Design (DDD). Ограниченные контексты инкапсулируют (заметают под ковёр) сложность, чтобы энтерпрайз мог масштабироваться на «команды на две пиццы». Компании, использующие BDD и требующие от своих рабочих групп писать <a href="https://cucumber.io/docs/guides/overview/">спецификации Cucumber</a>, имеют здесь перевес, но этим занимаются очень немногие бизнесы.<br>\n' +
                '<br>\n' +
                'Современная парадигма заключается в том, что нам всё равно не удастся понять задачу. Гуру цифровой трансформации говорят нам, что нужно разворачивать продукты в продакшен, чтобы пользователи сами говорили, в чём заключаются бизнес-требования, а не формулировать их самостоятельно априори. Благодаря этому мы можем сделать несколько попыток, чтобы реализовать всё правильно. Да, в этой парадигме нужно ошибаться быстро и часто.<br>\n' +
                '<br>\n' +
                'Вы уже должны были понять: дело не в каких-то недостатках UML. Мы просто отказались от бизнес-анализа и формальных спецификаций, поэтому перед нами встаёт новый вопрос: чем пользоваться вместо UML?<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/9i/i3/eh/9ii3ehum6s5m-crvfkwldrbcri4.png"></div><br>\n' +
                '<i>Пример масала-диаграммы</i><br>\n' +
                '<br>\n' +
                'Хотя некоторые используют легковесные техники моделирования наподобие <a href="https://c4model.com/">C4</a>, большинство применяемых сегодня диаграмм относятся к типу, который я несколько пренебрежительно называю <em>«масала-диаграммами»</em>. В конце концов, почему бы не назвать так диаграммы, которые я и сам делаю? Почему «масала»? Потому что они неформальные; они одновременно покрывают несколько размерностей, они могут быть и структурными, и поведенческими, логическими и физическими. Часто они являются мешаниной визуализаций <a href="https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf">архитектурной модели 4+1</a>.<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/webt/vx/ii/dw/vxiidwtjb7etoghvzably70nw5i.jpeg"></div><br>\n' +
                '<i>Как готовить масала-диаграмму</i><br>\n' +
                '<br>\n' +
                'Системы стоимостью в миллионы долларов, от которых зависят наши жизни и финансы, создаются, финансируются и реализуются полностью на основе этих масала-диаграмм, которые часто не содержат ничего лишнего, кроме нескольких эпиков и user stories.<br>\n' +
                '<br>\n' +
                '<blockquote>«Автор, ну архитектура ипотечной системы моего банка уж точно не была спроектирована на основе этих ваших ужасных масала-моделей!»</blockquote><br>\n' +
                'Это ведь не может быть правдой? На самом деле, если в вашем банке не используется CICS, а решение продали в прошлом году, то высока вероятность того, что оно сконструировано на основе тех самых масала-диаграмм.<br>\n' +
                '<br>\n' +
                'Неужели мир сошёл с ума? Нет мы просто отказались от <em>инженерного проектирования</em> ПО. Теперь это просто <em>авантюра с кодом</em>. Я не говорю, что те, кто пишет ПО, сами не являются инженерами; чаще всего, это не так. Смысл в том, что <em>на организационном уровне ПО больше не проектируется</em>, как это делается в других сферах, например, в машиностроении. Boeing никогда бы не заказал у Rolls Royce реактивный двигатель на основе подобной неформальной масала-диаграммы.<br>\n' +
                '<br>\n' +
                'Однако у масала-диаграмм есть своё предназначение. Если использовать их там, где им место, то они прекрасны. Видите ли, <em>это не спецификации</em>. Их цель — вызывать эмоции. Масала-диаграммы ценны, когда нужно <em>вызвать радость</em> в сердце руководителя, для которого они предназначены.<br>\n' +
                '<br>\n' +
                'Как бы я ни спорил с моими друзьями из лагеря Agile, я не могу остаться слепым к счастью людей. Мои клиенты и коллеги не только просят <em>больше масала-диаграмм</em>, но и настаивают, чтобы я делал их ещё более «масала» (чтобы я объединял в них больше архитектурных размерностей!). Зачем же этому противиться?<br>\n' +
                '<br>\n' +
                'UML всё равно остаётся в моём сердце и я продолжаю структурировать решения при помощи нескольких размерностей, но уже в виде чистых данных/таблиц. А когда дело доходит до графических нотаций, я достаю свой блендер и пятилитровую сковородку, и начинаю готовить для своих любимых клиентов замечательную масала-диаграмму.<br>\n' +
                '<br>\n' +
                '<hr><br>\n' +
                '<h4>На правах рекламы</h4><br>\n' +
                '<b>Эпичные серверы</b> — это <a href="https://vdsina.ru/cloud-servers?partner=habr414">VDS для размещения сайтов</a> от маленького интернет-магазина на Opencart до серьёзных проектов с огромной аудиторией. Создавайте собственные конфигурации серверов в пару кликов!<br>\n' +
                '<br>\n' +
                'Присоединяйтесь к <a href="https://t.me/vdsina">нашему чату в Telegram</a>.<br>\n' +
                '<br>\n' +
                '<a href="https://vdsina.ru/cloud-servers?partner=habr414"><img src="https://habrastorage.org/webt/8p/3v/z4/8p3vz47nluspfyc0axlkx88gdua.png"></a></div>',
            imageUrl: 'https://habrastorage.org/webt/go/re/vg/gorevgjqipvqgbxecrd6mnxzqxw.jpeg',
            karma: 1,
            tags: [{id: 9, title: 'uml'}, {id: 10, title: 'метки'}],
            user: {
                id: 5,
                firstName: 'Companu',
                lastName: 'VDSina.ru',
                imageUrl: 'https://habrastorage.org/getpro/habr/company/349/b75/e68/349b75e680748f727261c7de1a4e1c5f.png',
                login: 'VDSina.ru'
            },
            bookmarked: false
        },
        {
            id: 6,
            title: 'Хватит организовывать код по типу файлов',
            countBookmarks: 1,
            countComments: 2,
            countViews: 3,
            creationTime: new Date('May 19, 2021 09:29:00'),
            text: '<div class="post__text post__text_v2" id="post-content-body"><p>Какой самый популярный стиль организации кода вы встречали в корпоративных кодовых базах? Лично я чаще всего видел решение, подразумевающее группировку всех файлов по их типу. Таким образом, к примеру, в системе MVC все контроллеры, все сервисы, все репозитории, все POJO и так далее находятся вместе. Давайте назовем такое решение <strong>"стековым" стилем организации кода</strong>.</p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/50e/46b/fe6/50e46bfe63169183849e22198121ae5e.png" width="850" height="526"><figcaption></figcaption></figure><p>Это ужасный способ организации кода, и далее я объясню почему. Но сначала позвольте мне представить альтернативу.</p><p>Гораздо более удачный способ организации - группировка файлов по логической составляющей. Назовем это <strong>"смысловым" стилем организации кода</strong>. Идея состоит в том, чтобы держать вместе все файлы и классы, связанные с одной концепцией. Ставя смысловую составляющую на первое место, мы оптимизируем организацию кода для человеческого понимания (компиляторам все равно, куда вы помещаете какой файл). Обращая внимание в первую очередь на то, за какую часть проекта отвечает конкретный код, разработчики приходят к более разумному пониманию фактических границ системы.</p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/7ad/ae0/662/7adae0662890cbc15222ad29e8143ebd.png" width="862" height="472"><figcaption></figcaption></figure><p>Теперь давайте разберемся, почему я считаю, что смысловая модель лучше, чем модель стека.</p><h4>Неправильная абстракция</h4><p>Люди не читают код по назначению файлов и классов. Никто никогда не говорит: "покажите мне весь API проекта" или "продемонстрируйте мне все запросы, отправляемые решением". Люди читают код, полагаясь на его смысл и роль. Как в системе управления гостиницами, например, люди отдельно думают о номерах, гостях, ценах и так далее.</p><p>Поскольку стековый стиль организован по типу кода, трудно понять логическую модель системы. Мы не можем понять основные составляющие проекта и отношения между ними. Для этого приходится копать на один уровень глубже. Для человека, впервые читающего код, это является огромным источником неприятностей.</p><p>В нашем примере с управлением гостиницей, организованном смысловым стилем, весь код, связанный с гостями (независимо от технического назначения), помещён в один пакет, весь код, связанный с номерами, - в другой и так далее. Каждый из этих пакетов может иметь свою собственную внутреннюю организацию в стиле "стека" или просто несколько классов на одном уровне. Это позволяет легко найти все, что связано, скажем, с гостями, в одном месте.</p><h4>Нарушения связи</h4><p>Многие разработчики считают, что "стековая" организация все же выигрывает, отделяя разные слои кода друг от друга. Чтобы найти необходимые классы или файлы на любом уровне проекта, нужно просто перейти к слою, содержащему эти уровни. Это, безусловно, способствует разделению слоев друг от друга.</p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/e6a/958/007/e6a958007b098608603fddb9d94766b6.png" width="866" height="1238"><figcaption></figcaption></figure><p>Проблема этого аргумента в том, что он фокусируется на разделении, но полностью игнорирует потребность в связи между определёнными структурами. Допуская, что все файлы и классы определённого типа в такой системе расположены вместе, справедливо ли будет сказать, что их взаимная связь, как структур одинакового назначения, но разного смысла, нас устраивает? Положено ли все же, к примеру, контроллерам, находиться отдельно от своих классов и репозиториев? Можем ли мы позволить, скажем, всем репозиториям быть сильно зависимыми друг от друга, но отделенными от уровня сервисов? Очевидный ответ - НЕТ! Такой код стал бы хрестоматийным куском г*вна. Рефакторинг такой системы на более мелкие решения был бы абсолютным кошмаром, потому что вам пришлось бы отделить друг от друга все классы на каждом уровне стека. Это убивает основную цель использования стиля MVC.</p><p>Стиль "смысла" способствует установлению связей между различными узлами проекта, связанными исключительно областью применения. Это также облегчает будущий рефакторинг, поскольку логические границы более ясны, чем в стиле "стека". В добавок, как я уже сказал, внутри этих логических границ нам ничего не мешает при необходимости устроить "стековую" организацию и наслаждаться разделением структур разного назначения.</p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/02a/622/c3f/02a622c3ffed2c6adb0608ca4e78be48.png" width="878" height="1148"><figcaption></figcaption></figure><h4>Трудно менять</h4><p>Чтобы внести какие-либо значимые изменения в кодовую базу, организованную в "стековом" стиле, например добавить новое поле к структуре и модернизировать ее API, разработчик должен прошерстить несколько пакетов и изменить каждый из них. Это создает бессмысленную когнитивную нагрузку, поскольку разработчику приходится модифицировать множество "вещей", а не одну логическую вещь.</p><p>В "смысловом" стиле, если вы что-то меняете, вы вносите изменения только в пределах одной логической границы. Это облегчает внесение изменений, поскольку, меняя только один объект, мы работаем только в очень небольшой части кодовой базы.</p><h4>Ограничивает выбор дизайна</h4><p>Поскольку код организован из соображений функциональности, он ограничивает возможности людей подходить к дизайну системы. Например, поскольку логика предметной области должна относиться к "сервисам", разработчики противятся использованию правильно разделённых конструкций и запихивают все в сервисы, создавая тем самым кошмарные классы длиной в тысячи строк.</p><p>"Смысловой" же способ не ограничен определённым набором функциональных понятий, внутри которых будет организован код. Используя его, разработчик может создавать неограниченное количество смысловых групп файлов и классов, создавая наиболее приемлемую для конкретного проекта дизайн-модель.</p><hr><p>Способы мышления, которые скрываются в моделях организации кода – это то, о чем, как мне кажется, мы думаем недостаточно. Я хотел бы услышать от вас больше о том, как вы организуете свой код и как, по вашему мнению, это оказывает влияние на поведение разработчиков, формирование ментальных моделей или эффективность. Напишите об этом в комментариях!</p></div>',
            imageUrl: 'https://habrastorage.org/getpro/habr/upload_files/50e/46b/fe6/50e46bfe63169183849e22198121ae5e.png',
            karma: 1,
            tags: [{id: 11, title: 'организация кода'}],
            user: {
                id: 6,
                firstName: 'Kislay',
                lastName: 'Verma',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/f8e/004/d87/f8e004d878b0e35c2defaaca5386ae70.png',
                login: 'KislayVerma'
            },
            bookmarked: false
        },
        {
            id: 7,
            title: 'Собираем и устанавливаем свою Linux-систему на микроконтроллер STM32MP1',
            countBookmarks: 0,
            countComments: 0,
            countViews: 4,
            creationTime: new Date('May 29, 2021 06:29:00'),
            text: '<div class="post__text post__text-html post__text_v1" id="post-content-body"><img src="https://habrastorage.org/webt/ck/kd/gv/ckkdgvhjv2oui24ahhfq98lqny4.png"><br>\n' +
                '<br>\n' +
                'В этой статье мы автоматизируем процесс сборки и установки Linux-системы на микроконтроллер <a href="https://www.st.com/en/evaluation-tools/stm32mp157c-dk2.html">STM32MP157-DK2</a>. ОС будет обладать минимальной функциональностью, но зато мы соберём из исходников собственную систему. А поможет нам в этом <a href="http://www.buildroot.org">Buildroot</a> — система сборки Linux-дистрибутивов.&nbsp;<br>\n' +
                '<br>\n' +
                '<h2>Что такое Buildroot?</h2><br>\n' +
                'Сначала вспомним, что Linux-система состоит из достаточно большого количества разных компонентов. Так как мы здесь говорим про embedded-платформы, выделим следующие компоненты:<br>\n' +
                '<a name="habracut"></a><br>\n' +
                '<ol>\n' +
                '<li>Загрузчик (обычно для архитектуры ARM это U-Boot): выполняет инициализацию HW, загружает ядро Linux и стартует его.<br>\n' +
                '</li>\n' +
                '<li>Собственно, само ядро, управляющее процессами и памятью, содержащее планировщик, файловые системы, сетевой стек и, конечно, все необходимые драйвера для вашей аппаратной платформы.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Пользовательские библиотеки и приложения из open source экосистемы: командные оболочки, библиотеки для работы с графикой, сетью, шифрованием и так далее.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Внутренние пользовательские библиотеки и приложения, реализующие какую-то свою «бизнес-логику».&nbsp;</li>\n' +
                '</ol><br>\n' +
                'Собрать все эти компоненты воедино мы можем двумя способами:<br>\n' +
                '<br>\n' +
                '<ol>\n' +
                '<li><i><strong>Использовать готовый бинарный дистрибутив, например от Debian, Ubuntu или Fedora.</strong></i> <br>\n' +
                '<br>\n' +
                'Некоторые из этих дистрибутивов поддерживают архитектуру ARMv7. Основное преимущество этого решения в том, что оно простое: эти бинарные дистрибутивы знакомы большинству пользователей Linux-систем, они имеют красивую и простую в использовании систему управления пакетами, все пакеты предварительно скомпилированы, поэтому нашей цели можно достичь очень быстро. Однако собранные таким образом системы обычно сложно кастомизировать (компоненты уже созданы, поэтому вы не можете легко изменить их конфигурацию в соответствии с вашими потребностями) и сложно оптимизировать (с точки зрения объёма занимаемой памяти или времени загрузки).<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li><i><strong>Использовать систему сборки, например,</strong></i><a href="http://www.buildroot.org"><i><strong>Buildroot</strong></i></a><i><strong> или</strong></i><a href="https://www.yoctoproject.org/"><i><strong>Yocto</strong></i></a><i><strong>/</strong></i><a href="https://www.openembedded.org/"><i><strong>OpenEmbedded</strong></i></a>. <br>\n' +
                '<br>\n' +
                'Они позволяют собрать Linux-систему непосредственно из исходного кода. А это означает, что систему будет легко оптимизировать и кастомизировать под свои нужды. Конечно же, этот способ намного сложнее, а на компиляцию кода придётся потратить немало процессорного времени.<br>\n' +
                '</li>\n' +
                '</ol><br>\n' +
                'Мы выбираем второй способ. В этой статье используем Buildroot, потому что с этой системой сборки достаточно просто разобраться и она подходит для embedded-платформ.<br>\n' +
                '<br>\n' +
                'Buildroot — это набор make-файлов и скриптов, которые автоматизируют загрузку исходного кода различных компонентов, их извлечение, настройку, сборку и установку. В конечном итоге он генерирует образ системы, готовый к прошивке и обычно содержащий загрузчик, файл-образ ядра Linux и корневую файловую систему.<br>\n' +
                '<br>\n' +
                'Важно отметить, что Buildroot не поставляется с исходными кодами Linux, с U-Boot или с другими компонентами. Он всего лишь содержит набор скриптов и инструкций, описывающих, какой исходный код загружать и какие настройки использовать при сборке.<br>\n' +
                '<br>\n' +
                '<h2>Как собрать Linux-систему с Buildroot?</h2><br>\n' +
                'Начнём с установки самой системы Buildroot, а потом перейдём к её настройке:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">git <span class="hljs-built_in">clone</span> git://git.buildroot.net/buildroot\n' +
                '\n' +
                '<span class="hljs-built_in">cd</span> buildroot\n' +
                '</code></pre><br>\n' +
                'Обычно настройка Buildroot делается с помощью команды <strong>make menuconfig, </strong>которая позволяет указать необходимые опции для вашей системы. Но мы вместо этого используем свою конфигурацию, которую мы создали заранее — специально для STM32MP157-DK2. Она находится в моём <a href="https://github.com/tpetazzoni/buildroot/">репозитории</a>.<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">git remote add tpetazzoni https://github.com/tpetazzoni/buildroot.git\n' +
                '\n' +
                'git fetch tpetazzoni\n' +
                '\n' +
                'git checkout -b stm32mp157-dk2 tpetazzoni/2019.02/stm32mp157-dk\n' +
                '\n' +
                'А теперь дадим Buildroot’у команду использовать нашу конфигурацию.\n' +
                '\n' +
                'make stm32mp157_dk_defconfig</code></pre><br>\n' +
                'Мы могли бы сразу приступить к сборке, так как эта конфигурация работает нормально. Но здесь я хочу показать, как можно изменить конфигурацию и ускорить сборку. Мы изменим всего один параметр. Для этого запустим утилиту menuconfig (она встроена в Buildroot). Если кто-то из вас уже настраивал ядро ​​Linux, этот инструмент должен быть вам интуитивно понятен, поскольку это просто утилита для настройки.<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">make menuconfig</code></pre><br>\n' +
                'Если команда не сможет работать из-за отсутствия библиотеки ncurses, установите пакет <i><strong>libncurses-dev</strong></i> или <i><strong>ncurses-devel </strong></i><i>(точное название пакета будет зависеть от версии Linux ОС, на которой вы запускаете Buildroot)</i><i><strong>.</strong></i> <i>Библиотека </i><i><strong>ncurses </strong></i><i>предназначена для управления вводом-выводом на терминал.</i><br>\n' +
                '<br>\n' +
                'Успешно выполнив <strong>menuconfig, </strong>перейдём в подменю<strong> Toolchain</strong>. По умолчанию в <strong>Toolchain Type</strong> выбрана опция . Нужно изменить её на , нажав ENTER.&nbsp;&nbsp;<br>\n' +
                '<br>\n' +
                'Дело в том, что по умолчанию Buildroot использует собственный кросс-компилятор. Выбрав опцию , мы можем использовать более шустрый кросс-компилятор, специально заточенный под архитектуру ARMv7.<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/5b1/a9c/386/5b1a9c38683cf00e4cf4b2afbcb41797.png"></div><br>\n' +
                'Выходим из <strong>menuconfig </strong>и сохраняем изменения<strong>. </strong>Теперь пришло время поработать с командой <strong>make. </strong>Я люблю всё логировать, поэтому она будет выглядеть вот так:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">make 2&gt;&amp;1 | tee build.log</code></pre><br>\n' +
                'На этом этапе система сборки Buildroot проверит наличие всех необходимых пакетов. Если чего-то не обнаружит, то выполнение команды прервётся. Если это произойдёт, на сайте Buildroot посмотрите раздел <a href="https://buildroot.org/downloads/manual/manual.html#requirement-mandatory">System requirements &gt; Mandatory packages</a> и установите все необходимые зависимости. После этого можно запускать команду заново.<br>\n' +
                '<br>\n' +
                'На моей машине команда <strong>make </strong>работала 10 минут. После сборки появится набор каталогов и файлов (самое интересное лежит в output/images):<br>\n' +
                '<br>\n' +
                '<ul>\n' +
                '<li><strong>output/images/zImage:</strong> здесь лежит ядро Linux;<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li><strong>output/images/stm32mp157c-dk2.dtb:</strong> блоб-файл дерева устройств (Device Tree Blob); </li>\n' +
                '<li><strong>output/images/rootfs.{ext4,ext2}: </strong>файл-образ корневой файловой системы ext4, которая на сегодняшний день является самой популярной;<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li><strong>output/images/u-boot-spl.stm32:</strong> загрузчик первой стадии;<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li><strong>output/images/u-boot.img: </strong>загрузчик второй стадии;<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li><strong>output/images/sdcard.img:</strong> финальный образ для SD-карты, сгенерированный на основе предыдущих образов.</li>\n' +
                '</ul><br>\n' +
                '<h2>Прошивка и тестирование системы</h2><br>\n' +
                'Запишем sdcard.img на карту microSD:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">sudo dd <span class="hljs-keyword">if</span>=output/images/sdcard.img of=/dev/mmcblk0 bs=1M conv=fdatasync status=progress\n' +
                '</code></pre><br>\n' +
                'Не забудьте проверить, что в вашей системе карта microSD определяется как <strong>/dev/mmcblk0</strong> (и на всякий случай предупреждаю: после того, вы запишете туда образ, вся информация на этой карточке будет затёрта)!<br>\n' +
                '<br>\n' +
                'Подключите карту к микроконтроллеру.<br>\n' +
                '<br>\n' +
                'Соедините USB-кабелем ваш компьютер и micro-USB разъём с надписью ST-LINK CN11 на плате. Ваша машина должна распознать устройство с именем <strong>/dev/ttyACM0</strong>, через которое вы сможете получить доступ к последовательному порту платы. Установите на свой компьютер и запустите программу для общения с последовательным портом. Лично мне очень нравится <a href="https://github.com/npat-efault/picocom">picocom</a>:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">picocom -b 115200 /dev/ttyACM0</code></pre><br>\n' +
                'Он подходит для embedded-систем, так как занимает минимальный объём памяти (менее 20 КБ) и имеет подробную документацию.&nbsp;<br>\n' +
                '<br>\n' +
                'Наконец, включите плату, воткнув кабель USB-C в разъём PWR_IN CN6. Затем на последовательный порт начнут приходить сообщения. Нам важно, что в конце появится приглашение залогиниться в системе Buildroot. Можно войти в систему с пользователем root, пароль вводить не нужно.<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/8d0/009/5de/8d00095de814c8c94e2aeb6a82d67d86.jpg"></div><br>\n' +
                '<h2>Этапы загрузки системы и вход</h2><br>\n' +
                'Рассмотрим основные этапы процесса загрузки, изучая сообщения, которые приходят на последовательный порт:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">U-Boot SPL 2018.11-stm32mp-r2.1 (Apr 24 2019 — 10:37:17 +0200)</code></pre><br>\n' +
                'Это сообщение от загрузчика первой стадии: код, содержащимся в файле <strong>u-boot-spl.stm32</strong> скомпилирован как часть загрузчика U-Boot. Его непосредственно загружает STM32MP157. Загрузчик первой стадии должен быть достаточно маленьким, чтобы поместиться во внутреннюю память STM32MP157.<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">U-Boot 2018.11-stm32mp-r2.1 (Apr 24 2019 — 10:37:17 +0200)\n' +
                '</code></pre><br>\n' +
                'Это сообщение от загрузчика второй стадии, который был выгружен из внутренней памяти устройства во внешнюю память загрузчиком первой стадии. Загрузчик второй стадии — это файл <strong>u-boot.img</strong>, который также является частью загрузчика U-Boot.<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">Retrieving file: /boot/zImage\n' +
                '\n' +
                'Retrieving file: /boot/stm32mp157c-dk2.dtb</code></pre><br>\n' +
                'Эти сообщения печатает загрузчик второй стадии: мы видим, что он загрузил образ ядра Linux (файл zImage) и блоб дерева устройств (файл stm32mp157c-dk2.dtb), описывающий нашу аппаратную платформу. Хорошо, U-Boot загрузил оба файла в память: теперь он готов к запуску ядра Linux.<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">Starting kernel ...\n' +
                '\n' +
                'Это последнее сообщение U-Boot, после этого управление передаётся ядру.\n' +
                '\n' +
                '[&nbsp; &nbsp; 0.000000] Booting Linux on physical CPU 0x0\n' +
                '\n' +
                '[&nbsp; &nbsp; 0.000000] Linux version 4.19.26 (thomas@windsurf) (gcc version 8.2.1 20180802 (GNU Toolchain <span class="hljs-keyword">for</span> the A-profile Architecture 8.2-2018.11 (arm-rel-8.26))) <span class="hljs-comment">#1 SMP PREEMPT Wed Apr 24 10:38:00 CEST 2019</span>\n' +
                '</code></pre><br>\n' +
                'И сразу появляются первые сообщения ядра Linux, показывающие версию Linux и дату/время сборки. Далее идут другие, не слишком интересные сообщения… Нам нужно дождаться вот этого:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">[&nbsp; &nbsp; 3.248315] VFS: Mounted root (ext4 filesystem) <span class="hljs-built_in">readonly</span> on device 179:4.</code></pre><br>\n' +
                'Это сообщение указывает на то, что ядро ​​смонтировало корневую файловую систему. После этого ядро ​​запустит первый пользовательский процесс. Поэтому следующие сообщения будут связаны с инициализацией пользовательских служб:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">Starting syslogd: OK\n' +
                '\n' +
                '[...]\n' +
                '\n' +
                'Welcome to Buildroot\n' +
                '\n' +
                'buildroot login:&nbsp;\n' +
                '</code></pre><br>\n' +
                'И вот, наконец, появляется то самое сообщение от Buildroot с просьбой залогиниться.<br>\n' +
                '<br>\n' +
                'После входа в систему вы получите доступ к командной оболочке Linux. Введя команду <strong>ps, </strong>можно посмотреть список процессов, команда <strong>ls/</strong> покажет содержимое корневой файловой системы и так далее.<br>\n' +
                '<br>\n' +
                'Также можно немного поиграться с платой — например, включить и выключить один из светодиодов:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs"><span class="hljs-built_in">echo</span> 255 &gt; /sys/class/leds/heartbeat/brightness\n' +
                '\n' +
                '<span class="hljs-built_in">echo</span> 0 &gt; /sys/class/leds/heartbeat/brightness\n' +
                '</code></pre><br>\n' +
                '<h2>Как сделать это «с нуля»?</h2><br>\n' +
                '<h3>Углубляемся в основы конфигурирования Buildroot</h3><br>\n' +
                'В начале статьи мы говорили про настройку и оптимизацию конфигурации Buildroot. По идее, для этого нужно сначала изучить основы конфигурирования в этой системе. Поэтому вернёмся в прошлое к команде <strong>make menuconfig</strong>.<br>\n' +
                '<br>\n' +
                'В меню <strong>Target options</strong> выбрана архитектура <i>ARM Little Endian, а в </i><i><strong>Target Architecture Variant</strong></i><i> указан</i> <i>Cortex-A7</i>. На этом процессоре как раз построен наш микроконтроллер.<br>\n' +
                '<br>\n' +
                'В меню <strong>Build options</strong> используем все значения по умолчанию.<br>\n' +
                '<br>\n' +
                'Как я писал выше, в меню <strong>Toolchain</strong> вместо кросс-компилятора по умолчанию был выбран пункт &lt;<i>External toolchain&gt;</i>.<br>\n' +
                '<br>\n' +
                'В меню System configuration мы произвели следующие изменения:<br>\n' +
                '<br>\n' +
                '<ol>\n' +
                '<li>Оверлей-каталоги корневой файловой системы определены как <strong>board/stmicroelectronics/stm32mp157-dk/overlay/</strong>. Эта опция сообщает Buildroot, что содержимое этого каталога должно быть скопировано в корневую файловую систему в конце сборки. Такой подход позволяет добавлять собственные файлы в корневую файловую систему.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Для пользовательских скриптов, запускаемых после создания образов файловой системы, задано значение <strong>support/scripts/genimage.sh</strong>, а для параметра <i>Extra arguments</i>, передаваемого в пользовательские скрипты, задано значение <strong>-c board/stmicroelectronics/stm32mp157-dk/genimage.cfg</strong>. Это означает, что Buildroot должен вызвать скрипт genimage.sh в самом конце сборки: его цель — сгенерировать финальный образ для SD-карты, который мы уже использовали.</li>\n' +
                '</ol><br>\n' +
                'В меню Kernel мы выбрали версию Linux и путь для конфигурации ядра:<br>\n' +
                '<br>\n' +
                '<ol>\n' +
                '<li>Мы загрузили исходники ядра Linux с Github с помощью макроса Buildroot под названием <strong>github. </strong>В соответствии с выбранной версией (v4.19-stm32mp-r1.2), Buildroot пошёл в репозиторий (<a href="https://github.com/STMicroelectronics/linux/">https://github.com/STMicroelectronics/linux/</a>) и загрузил оттуда ядро.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Мы указали путь для конфигурации ядра: <strong>board/stmicroelectronics/stm32mp157-dk/linux.config</strong>. Конфигурацию ядра также можно кастомизировать для ваших нужд (эта тема выходит за рамки данной статьи). <br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Мы включили опцию &lt;<i>Build a Device Tree Blob (DTB)&gt;</i> и записали в <i>In-tree Device Tree Source file names</i> имя нашего файла <strong>stm32mp157c-dk2</strong>. И тогда Buildroot сможет сформировать и использовать дерево устройств именно для нашей платформы.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Мы установили для <i>Install kernel image значение &lt;/boot in target&gt;, </i>поэтому образ ядра и дерево устройств будут находится в каталоге<i><strong>/boot</strong></i>корневой файловой системы<i>.</i> U-Boot будет загружать их как раз оттуда.</li>\n' +
                '</ol><br>\n' +
                'В меню <strong>Target packages</strong> оставили значения по умолчанию: активен только пакет <i>BusyBox</i>.<a href="https://busybox.net/"> BusyBox</a> — очень популярный инструмент для embedded-платформ: это легковесная альтернатива Linux shell и другим инструментам командной строки (<strong>cp, mv, ls, vi, wget, tar</strong>). Для нашей системы нам хватит одного BusyBox!<br>\n' +
                '<br>\n' +
                'В меню <strong>Filesystem images </strong>активировали <i><strong>ext2/3/4</strong></i><i><strong>root filesystem</strong></i> и выбрали <i><strong>ext4</strong></i>. Эта файловая система отлично подходит для SD-карт.<br>\n' +
                '<br>\n' +
                'Теперь в меню <strong>Bootloaders</strong> активируем <i>U-Boot</i>, для которого выполняем следующий набор действий:<br>\n' +
                '<br>\n' +
                '<ol>\n' +
                '<li>Загружаем U-Boot из репозитория<a href="https://github.com/STMicroelectronics/u-boot.git"> https://github.com/STMicroelectronics/u-boot.git</a> с Git-тегом <i>v2018.11-stm32mp-r2.1</i><br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>U-Boot используем с предустановленной конфигурацией stm32mp15_basic, которую мы указываем для нашей платы с помощью <i><strong>defconfig</strong></i>.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Вообще, эта конфигурация предполагает использование сторожевого таймера STM32. Но в нашей минималистичной версии Linux его нет. Поэтому мы пойдём в файл <strong>board/stmicroelectronics/stm32mp157-dk/uboot-fragment.config</strong> и отключим сторожевой таймер для текущей конфигурации. Если мы захотим расширить возможности нашей Linux-системы и добавить его, то использование таймер нужно вновь разрешить.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Подменю <i><strong>U-Boot binary format</strong></i>: тут нужно предупредить Buildroot, что для загрузчика второй стадии должен быть создан образ <strong>u-boot.img</strong>, и именно его нужно будет поместить в <strong>output/images</strong>.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Мы также сообщаем Buildroot, что на базе нашей конфигурации для U-Boot будет собран загрузчик первой стадии (файл <strong>spl/u-boot-spl.stm32)</strong>. Его тоже нужно будет разместить в <strong>output/images</strong>.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>В окружение U-Boot мы добавляем опцию <i><strong>DEVICE_TREE=stm32mp157c-dk2.</strong></i> Она понадобится в процессе сборки U-Boot, чтобы использовать дерево устройств именно для нашей платформы.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>В меню <strong>Host utilities</strong> мы подключаем пакет genimage.</li>\n' +
                '</ol><br>\n' +
                'Вся эта конфигурация сохраняется в простом текстовом файле <strong>configs/stm32mp157_dk_defconfig</strong>, который мы загружали изначально при запуске <strong>make stm32mp157_dk_defconfig</strong>.&nbsp;<br>\n' +
                '<br>\n' +
                '<h3>Углубляемся в процесс сборки Buildroot</h3><br>\n' +
                'Надеюсь, после изучения основ конфигурирования стало понятнее, как происходит сборка (для простоты я опустил несколько промежуточных шагов):<br>\n' +
                '<br>\n' +
                '<ol>\n' +
                '<li>Загрузка и установка компилятора с веб-сайта ARM и установка библиотек C и C ++ на нашу корневую файловую систему.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Загрузка исходного кода ядра Linux из репозитория STMicroelectronics, сборка ядра в соответствии с нашей конфигурацией, размещение <strong>zImage</strong> и <strong>stm32mp157c-dk2.dtb</strong> в каталоге<strong> output/images, </strong>размещение корневой файловой системы в каталоге <strong>/boot</strong>. Кроме того, на этом этапе происходит установка модулей ядра в корневую файловую систему.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Загрузка исходного кода U-Boot из репозитория STMicroelectronics, его сборка в соответствии с нашей конфигурацией, размещение <strong>u-boot-spl.stm32</strong> <strong>u-boot.img</strong> в каталоге <strong>output/images.</strong><br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Загрузка исходного кода Busybox с официального сайта, его сборка в соответствии с нашей конфигурацией и установка в корневую файловую систему.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Копирование содержимого оверлей-каталогов в корневую файловую систему.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Создание <i>ext4-образа</i> корневой файловой системы и его установка в&nbsp; <strong>output/images/rootfs.ext4</strong><br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Вызов скрипта <i>genimage.sh, который сгенерирует образ для SD-карты</i>, <strong>output/images/sdcard.img</strong></li>\n' +
                '</ol><br>\n' +
                'Теперь давайте посмотрим на файл <strong>board/stmicroelectronics/stm32mp157-dk/genimage.cfg</strong>, который советует утилите <strong>genimage</strong>, как нужно правильно генерировать образ для SD-карты:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">image sdcard.img {\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hdimage {\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gpt = «<span class="hljs-literal">true</span>»\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition fsbl1 {\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image = «u-boot-spl.stm32»\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition fsbl2 {\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image = «u-boot-spl.stm32»\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition uboot {\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image = «u-boot.img»\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition rootfs {\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image = «rootfs.ext4»\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;partition-type = 0x83\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bootable = «yes»\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size = 256M\n' +
                '\n' +
                '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n' +
                '\n' +
                '}\n' +
                '</code></pre><br>\n' +
                'Какие конкретно указания даны в этом скрипте:<br>\n' +
                '<br>\n' +
                '<ol>\n' +
                '<li>Создать файл sdcard.img<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Этот файл должен содержать несколько разделов в соответствии с таблицей<a href="https://en.wikipedia.org/wiki/GUID_Partition_Table"> GPT partition table</a>. Это нужно, чтобы встроенный ROM микроконтроллера STM32MP157 смог найти загрузчика первой стадии.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Два первых раздела должны называться <strong>fsbl1 </strong>и <strong>fsbl2. </strong>Там должен храниться «сырой» бинарный код загрузчика первой стадии (отмечу, что в разделах не установлено никакой файловой системы). В коде ROM, встроенном в STM32MP157, жёстко прописано: нужно искать загрузчик первой стадии в первых двух разделах с именами, начинающимися с <strong>fsbl</strong>.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Третий раздел (тоже без файловой системы) с именем uboot, по аналогии с предыдущим пунктом, хранит сырой бинарный файл загрузчика второй стадии. Действительно, загрузчик первой стадии должен найти загрузчика второй стадии в третьем разделе SD-карты (это определено в конфигурации U-Boot и может быть при необходимости изменено ).<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Четвёртый раздел содержит образ файловой системы ext4, созданный Buildroot. Этот образ фактически является нашей корневой файловой системой, вместе с BusyBox, стандартными библиотеками C/C ++, а также файлом-образом ядра Linux и блоб-файлом дерева устройств.</li>\n' +
                '</ol><br>\n' +
                'Последний раздел помечен как загрузочный (bootable). Это важно, потому что конфигурация U-Boot для аппаратной платформы STM32MP157 по умолчанию следует концепции <a href="http://git.denx.de/?p=u-boot.git;a=blob;f=doc/README.distro">U-Boot Generic Distro Concept</a>. При загрузке U-Boot будет искать раздел, помеченный как загрузочный, а затем внутри файловой системы, содержащейся в этом разделе, искать файл <strong>/boot/extlinux/extlinux.conf</strong>, чтобы узнать, как загрузить систему.<br>\n' +
                '<br>\n' +
                'Файл <strong>extlinux.conf</strong> находится внутри оверлей-каталога нашей файловой системы (<strong>board/stmicroelectronics/stm32mp157-dk/overlay/boot/extlinux/extlinux.conf)</strong>, в корневой файловой системе он будет определяться как <strong>/boot/extlinux/extlinux.conf</strong> и U-Boot легко найдёт его.&nbsp;<br>\n' +
                '<br>\n' +
                'Вот что внутри этого файла:<br>\n' +
                '<br>\n' +
                '<pre><code class="bash hljs">label stm32mp15-buildroot\n' +
                '\n' +
                '&nbsp;&nbsp;kernel /boot/zImage\n' +
                '\n' +
                '&nbsp;&nbsp;devicetree /boot/stm32mp157c-dk2.dtb\n' +
                '\n' +
                '&nbsp;&nbsp;append root=/dev/mmcblk0p4 rootwait\n' +
                '</code></pre><br>\n' +
                'Таким образом мы говорим U-Boot, чтобы он загружал образ ядра из <strong>/boot/zImage</strong>, дерево устройств — из <strong>/boot/stm32mp157c-dk2.dtb. </strong>А строка <strong>root=/dev/mmcblk0p4 rootwait </strong>должна быть передана ядру Linux во время загрузки. Именно в этом выражении (<strong>root=/dev/mmcblk0p4) </strong>хранится информация о том, где находится корневая файловая система.<br>\n' +
                '<br>\n' +
                'Итак, сформулируем этапы загрузки собранной Linux-системы на нашей аппаратной платформе — с учётом новых подробностей:<br>\n' +
                '<br>\n' +
                '<ol>\n' +
                '<li>Встроенный в STM32MP157 ROM ищет разделы GPT, чьи имена начинаются с fsbl. Если успешно, то загружает их содержимое во внутреннюю память STM32 и запускает загрузчик первой стадии.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>В соответствии с хардкодом, он обязан загрузить из третьего раздела SD-карты загрузчика второй стадии. Так, загрузчик первой стадии инициализирует внешнюю RAM, грузит в неё загрузчика второй стадии и стартует его.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Загрузчик второй стадии выполняет ещё одну инициализацию, а затем ищет раздел, помеченный как загрузочный (bootable). Он обнаруживает, что таковым является четвёртый раздел. Он загружает файл <strong>/boot/extlinux/extlinux.conf</strong>, благодаря которому узнаёт, где расположены ядро ​​и дерево устройств. Он загружает их и запускает ядро ​​с аргументами, указанными всё в том же файле <strong>extlinux.conf</strong>.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>Ядро Linux работает до момента монтирования корневой файловой системы, расположение которой указано в параметре <strong>root=/dev/mmcblk0p4</strong>. После монтирования корневой файловой системы ядро ​​запускает первый пользовательский процесс.<br>\n' +
                '<br>\n' +
                '</li>\n' +
                '<li>В данном случае первый пользовательский процесс — это <strong>/sbin/init</strong> (спасибо, BusyBox!). Он стартует несколько служб, а потом приглашает пользователя войти (ввести логин).</li>\n' +
                '</ol><br>\n' +
                '<strong>P.S.</strong> Вы можете найти исходный код для Buildroot, использованный в этой статье, <a href="https://github.com/tpetazzoni/buildroot/tree/2019.02/stm32mp157-dk-blog-1">вот здесь</a>.<br>\n' +
                '<br>\n' +
                '<hr><br>\n' +
                'Облачные серверы от <a href="https://macloud.ru/?partner=4189mjxpzx">Маклауд</a> быстрые и безопасные.<br>\n' +
                '<br>\n' +
                'Зарегистрируйтесь по ссылке выше или кликнув на баннер и получите 10% скидку на первый месяц аренды сервера любой конфигурации!<br>\n' +
                '<br>\n' +
                '<a href="https://macloud.ru/?partner=4189mjxpzx&amp;utm_source=habr&amp;utm_medium=perevod&amp;utm_campaign=grigri"><img src="https://habrastorage.org/webt/et/1a/yp/et1aypandyuamqprsz3m2ntm4ky.png"></a></div>',
            imageUrl: 'https://habrastorage.org/webt/ck/kd/gv/ckkdgvhjv2oui24ahhfq98lqny4.png',
            karma: 2,
            tags: [{id: 12, title: 'микроконтроллеры'}, {id: 13, title: 'linux'}],
            user: {
                id: 7,
                firstName: 'Маклауд',
                lastName: 'Verlan',
                imageUrl: 'https://www.wmj.ru/thumb/0x1502/filters:quality(75):no_upscale()/imgs/2017/11/08/13/1145577/02f490db91711eb4e7ef37ecedd7e2e9cb02dea6.jpg"',
                login: 'МаклаудVerlan'
            },
            bookmarked: false
        },
        {
            id: 8,
            title: 'Работа в малом бизнесе в ИТ: 7 важных уроков',
            countBookmarks: 111,
            countComments: 1,
            countViews: 13,
            creationTime: new Date('May 30, 2021 17:29:00'),
            text: '<div class="post__text post__text_v2" id="post-content-body"><p>Когда начали строить новый красивый бизнес-центр недалеко от главной улицы города, мы с подругой были выпускницами престижного вуза и поступали в аспирантуру. Она задрала голову на этажи из стекла, бетона и металла и спросила: «Хотела бы работать в таком здании, в огромной корпорации?» «Ага, может когда-то», — кивнула я, думая об одной лишь карьере учёного. Но у жизни на моё «ага» были свои планы: я прошла и через корпорации, и через науку, и через вуз — и в итоге оказалась в малом бизнесе. В самой комфортной точке на протяжении моей карьеры. Здание достроено, в нём — межгалактические корпорации, но я ни за что не пойду туда работать: у меня есть веские причины сделать такой выбор.</p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/f7a/51d/319/f7a51d3191eaa9c2a49781f51b34a0b9.png" width="1600" height="1066"><figcaption></figcaption></figure><p>Я могу бесконечно говорить о трёх вещах: об удалённой работе (привет, 8 лет), о книгах и о своём прочтении работы в малом бизнесе. Ровно 2 года назад я уже писала подробную <a href="https://habr.com/ru/company/regionsoft/blog/455018/"><u>статью о «большой любви к малому бизнесу»</u></a>, но осталось много недосказанного, что-то изменилось и сверху всего этого пандемия размашисто внесла свои неповторимые штрихи (будь она неладна).&nbsp;</p><p>Итак, 7 важнейших уроков, которые я вынесла из работы в малом бизнесе, а точнее в ИТ-компании, которая успешно разрабатывает одну из самых функциональных CRM-систем российского рынка.&nbsp;</p><h3>Урок 1. Свобода и ответственность без границ</h3><p>Свобода в небольшой компании — не случайное пафосное слово. Это масштабная функция, которая может оказаться как глотком свежего воздуха и фактором роста сотрудника, так и лучшим орудием уничтожения карьеры. Всё зависит от того, кому в руки эта самая свобода попадёт и не спутает ли он её со вседозволенностью и вечной халявой. Работая в малом бизнесе, сотрудники могут влиять на каждый рабочий процесс, выбирать инструменты работы, средства разработки, предлагать изменения и самому же их реализовывать. Я это видела и в рекламном агентстве, и в производственной компании, но в IT-компании это заметно как нигде.&nbsp;</p><p>Однако вслед за свободой наступает ответственность и в малом бизнесе она особенно ощутима: у тебя нет шансов перекидывать задачу по кругу, пока она не затеряется в Jira, нет возможности валить на заболевшего или уволенного сотрудника. Каждый сотрудник небольшой компании не просто винтик в машине, а целый технологический и организационный узел, сбой в котором моментально выведет из строя часть значимых процессов в команде. Да, в небольших компаниях есть и лентяи, и факапщики, и любители пофилонить, но как правило это слабые звенья, которых либо держат ради каких-то рутинных задач (которые никто не хочет на себе тянуть), либо быстро замечают и исключают из общей цепи.&nbsp;</p><p>Соотношение свободы и ответственности — это ключевой момент, о котором стоит подумать, устраиваясь работать в компанию. Если вы человек большой команды и вам нужен буксир, откажитесь от идеи идти работать в малом бизнесе. В большой корпорации в этом смысле выжить и удержаться несравнимо проще.&nbsp;</p><h3>Урок 2. Гибкость в любых условиях</h3><p>У больших корпораций есть много денег на масштабирование, эксперименты, развороты на рынке и т.д. Но мало кто из них выбирает такой путь. И дело не в том, что корпорация не верит в сотрудников или в рынок, — дело в том, что в ней настолько огромные и неповоротливые бизнес-процессы, что проще создать экспериментальный стартап или купить компанию-спутник, чем что-то реально изменить. В малом бизнесе чаще всего ресурсов меньше, но при этом есть гибкость: небольшие связи в процессах и сами процессы можно оперативно отрефакторить, пересмотреть и запустить. Огромный плюс в том, что нет никаких согласований с головным офисом, тучи согласующих, жёсткой системы субординации (хотя некоторые компании умудряются это учинить в коллективе на 30 человек — но это скорее исключение).&nbsp;</p><p>Малым ИТ-компаниям проще отвечать на запросы клиентов и вызовы рынка, находиться всегда лицом к пользователю. Например, мы постоянно <a href="https://www.regionsoft.ru/?page=crm_red"><u>развиваем нашу CRM</u></a> на основе откликов и требований клиентов, вводим те продукты, которые актуальные для наших клиентов прямо сейчас: так, в пандемию вышел облачный сервис отслеживания, предназначенный для управления удалёнными сотрудниками (перемещение объектов, грузов, курьеров) <a href="https://www.regionsoft.ru/?page=geo"><u>GeoMonitor</u></a>, а до этого для небольших сервисных служб появился <a href="https://zedline.ru/"><u>ZedLine Support</u></a>, предназначенный для лёгкой и быстрой работы с обращениями клиентов в облаке.</p><p>Опять же, во время форс-мажора планетарного масштаба малый бизнес в ИТ координировался и группировался активнее остальных: удалённая работа, командное взаимодействие, удалённые установки и т.д., всё было развёрнуто в большинстве компаний за 1-2 дня. При этом каждый ставил цель не просто работать, но и сохранить сотрудников, сохранить темпы разработки и создания услуг. Да, нам, айтишникам, в основной массе повезло чуть больше остальных, но и усилия были приложены немалые.</p><h3>Урок 3. Учиться быть заметным и самостоятельным</h3><p>Когда я работала в большой корпорации, я к великим своим бедам стала заметной для всех и слишком поздно поняла, что это неправильно. Пока я бодалась за справедливость, честные штрафы и прозрачные KPI в партнёрской сети корпорации, бесила половину коллектива своим занудством и перфекционизмом, мои двое молчаливых и кивающих коллег не просто получили руководящие места, но даже были удостоены отраслевой награды. Для меня их работа была настоящей итальянской забастовкой, но высокие начальники видели спокойных «надёжных» подчинённых. Было очевидно, что самостоятельность была не в чести, а инициатива… имела инициатора.&nbsp;</p><p>В малом бизнесе ты заметен всегда — хочешь ты этого или нет. Больше того, согласование часто происходит на бегу и ты должен совершенно самостоятельно принимать рабочие решения, в том числе затрагивающие финансы и бюджетирование. И если тебя спросят, ты обязан мотивированно объяснить своё решение — не оправдаться, не отмолчаться, а показать, что именно сделано. Быть самостоятельным на работе сложно, быть самостоятельным в команде (а малый бизнес очень чувствителен к команде и процессам внутри неё) ещё сложнее, потому что куча прокачанных и единоличных юнитов должна работать сообща, координироваться, договариваться. Быть заметным в компании, быть профессионалом и самостоятельно принимать решения — трудная ежедневная работа. Но она даёт плоды: после такой компании вы всегда и уже в любой компании будете ощущать себя не&nbsp; винтиком и не маленьким человеком, а полноценным профи, фактически ИП внутри конторы :-) Кстати, многим это может быть не по нраву — иногда эффективнее, практичнее и выгоднее быть просто очень хорошим исполнителем. Кстати, в небольших компаниях такие люди высоко ценятся.&nbsp;</p><h3>Урок 4. Руководитель — прежде всего человек</h3><p>Малый бизнес — не сказка и не мир иллюзий, руководители в нём встречаются разные: и настоящие лидеры, и гении, и деспоты, и самодуры, и первые среди равных. Однако каким бы ни был руководитель небольшой компании, он не наёмник, не исполнительный директор, а значит он переживает всей душой за то что происходит в компании. Если сотрудники не будут учитывать эту особенность, им придётся нелегко: это как прийти в чужой дом и отнестись к нему максимальное неуважительно, небрежно.&nbsp;</p><p>Чаще всего руководитель в бизнесе это увлечённый и вовлечённый человек, который не просто выслушает вас и подискутирует, но и готов пойти на любые изменения и новации, но только в одном случае: если вы способны адекватно оценить затраты и выхлоп задуманного. Швыряться деньгами и жечь бюджеты в малом бизнесе не получится — привыкайте к словам «эффективность», «результат», «реальные затраты», «альтернативы», «а что нам это даст». Без ответов на такие вопросы лучше даже не инициировать общение. Кстати, это одна из причин, почему многие коммерсы, маркетологи, продажники, пиарщики из крупных корпораций не идут в малый бизнес — им не сподручно работать без концепций, пятичасовых совещаний, космических бюджетов и сторонних исполнителей.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><h3>Урок 5. Корпоративный перфекционизм</h3><p>Малый бизнес в ИТ делает по-настоящему крутые вещи и как правило предоставляет профессиональные, качественные услуги. Это свойство просто объяснить: компактность компании определяет высокую концентрацию навыков и опыта внутри команды. Дополнительно выигрывают компании, где сотрудники работают подолгу (например, у нас в РегионСофт сотрудники работают по 8, 12,15 лет и больше): опыт аккумулируется, наполняется новыми смыслами, впитывает инновации и при этом остаётся внутри компании. Таким образом, заказчики и клиенты всегда могут рассчитывать на высокую квалификацию разработчиков, поддержки, коммерческого блока. Кстати, дополнительный стимул «держать марку» — это необходимость сохранить позитивную повестку и деловую репутацию. Слишком дорого обходятся репутационные риски, в них лучше не влезать.</p><p>Небольшие ИТ-компании максимально близки к клиенту, работают с ним персонально и знают практически о каждой боли заказчика на своём опыте. Например, мы создаём CRM-системы и программные продукты для автоматизации бизнеса и работаем в каждом из этих продуктов ежедневно, тестируя их не только по тест-кейсам и тест-планам, но и на реальных боевых сборках, Если нам что-то не нравится, мы непременно это исправим — сотрудникам наших клиентов должно быть комфортно работать с нашими системами.</p><p>Немаловажно, что в небольших ИТ-компаниях почти нет никакой бюрократии и клиент достаточно легко может выйти на руководителя компании и решить свои вопросы и разрулить проблемы напрямую. Кстати, неплохая мотивация для сотрудников и отсылка к той самой заметности и самостоятельности из пунктов выше — лучше сделать сразу хорошо, не ждать, когда придёт шеф и задаст вопрос с максимальной конкретностью.</p><h3>Урок 6. Ты меняешься как профессионал — и это не остановить</h3><p>Работа в небольшой компании — удивительно странная штука с позиций карьеры. Ты прокачиваешь опыт, растёшь, обрастаешь управленческими навыками&nbsp; буквально на любой должности, но при этом твоя компания может быть известна только в своём сегменте рынка. И здесь очень интересная ситуация с переходом в другие компании: если HR профессиональный и умный, вас оторвут с руками, если так себе и не особо вникает, то от вас будут хотеть услышать: «Да я к вам из самого Яндекса (Гугла, Майкрософта, Теслы, Газпрома и т.д.» — лишь бы звучало). Но мы за умных, поэтому продолжим.</p><p>Итак, в крупных компаниях могут вообще не знать, на что способен сотрудник — например, я видела, как человек лет 9 назад вёл великолепный личный блог на Хабре, но в компании об этом даже не спросили и их вновь созданный блог вели наёмные копирайтеры. Конечно, это было и тактической, и финансовой потерей. В небольшой ИТ-компании так практически не бывает: любой навык можно раскрыть и предоставить в пользование компании, а заодно выйти на новый уровень.&nbsp;</p><p>Тесная обратная связь между сотрудниками, сотрудником и руководителем, компанией и клиентом гарантированно проходит ко всем ключевым участникам бизнес-процесса и каждый сможет не только выполнить работу, но и скорректировать свои дальнейшие действия. Благодаря открытости всех процессов и тесному взаимодействию, особенно с ведущими специалистами и руководителем, почти у всех сотрудников есть видение происходящего, режим многозадачности, представление обо многих аспектах ведения бизнеса - во всяком случае, если сам сотрудник этого захочет. Это даёт много бонусов: от быстрого профессионального роста до взаимозаменяемости сотрудников компании на случай отсутствия или форс-мажора. В таких ИТ-компаниях каждый сотрудник точно знает, ради чего он приходит на работу. В малом бизнесе ты всегда играешь роль, даже если кажется, что нет.</p><p>С карьерным ростом — интересная история. В крупной компании есть система продвижения - это мотивация и HR-функция, если тебя ценят или ты выгоден, повышение раз в несколько лет гарантировано (иногда и чаще). В небольшой компании ты не старший разработчик, тимлид или директор по маркетингу — ты Дима, Ирина, Миша, который умеет и может. Хотя, конечно, никто не против написать в трудовой и на визитке должность, о которой вы так мечтали.</p><p>Кстати, забавный момент: очень многие сотрудники компаний малого бизнеса (не только в ИТ, а вообще в любой сфере) хотят завести своё дело, глядя на шефа - кажется, всё очень просто, буквально играючи. Обычно такие попытки заканчиваются провалом, редко — успехом, но это показательная отличительная черта малого бизнеса от остальных компаний.</p><h3>Урок 7. Во всём есть мера</h3><p>Как ни парадоксально, малый бизнес не имеет права быть расхлябанной демократией. Если это допустить, анархия придёт на удивление быстро, процессы рухнут...и свобода вас встретит радостно у входа, и трудовую отдадут. Ладно, кроме лирики, в ИТ-компаниях (да и во многих других) есть и KPI, и регламенты, и многочисленные нормы и правила. Но у них есть важное отличие от больших компаний: все метрики адекватны, измеримы, выполнимы. Потому что это не спущенная сверху формальность, а реальная оценка работы каждого. Поэтому не нужно удивляться, если вы встретите в компании кучу формальностей. Это важно для поддержания работоспособности компании — и при правильном применении никак не мешает оставаться людьми.</p><hr><p>Сегодня, 6 июня 2021 года, нашей компании <a href="https://www.regionsoft.ru/"><u>RegionSoft Developer Studio</u></a> исполнилось 20 лет. 20 лет автоматизации, разработки, помощи малому и среднему бизнесу, релизов, деплоев, рефакторинга, доверия, дружбы, понимания и умения не соперничать, а перенимать лучшее и формировать себя внутри команды и компании. Видите, сколько всего я намешала в одном предложении? Да так оно и есть: без этих компонентов успешную ИТ-компанию не создать. Каждый из нас работает для компании, каждый из нас делает компанию для тех, кто пользуется нашими программами в оперативной работе каждый день: таких компаний больше 7000. Мы повзрослели, возвели профессионализм в абсолют, но сохранили умение слышать клиентов, понимать друг друга и быть готовыми к любым вызовам. Ну, третий десяток, не подведи.&nbsp;</p></div>',
            imageUrl: 'https://habrastorage.org/getpro/habr/upload_files/f7a/51d/319/f7a51d3191eaa9c2a49781f51b34a0b9.png',
            karma: 1,
            tags: [{id: 13, title: 'работа в малом бизнесе'}, {id: 14, title: 'малый бизнес'}],
            user: {
                id: 8,
                firstName: 'Lexa',
                lastName: 'RegionSoft',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/f8e/004/d87/f8e004d878b0e35c2defaaca5386ae70.png',
                login: 'LexaRegionSoft'
            },
            bookmarked: false
        },
        {
            id: 9,
            title: 'Micro-USB-кабели и питание Raspberry Pi',
            countBookmarks: 4,
            countComments: 0,
            countViews: 9,
            creationTime: new Date('May 01, 2021 19:29:00'),
            text: '<div class="post__text post__text-html post__text_v1" id="post-content-body">На ресурсах, посвящённых Raspberry Pi, часто всплывает вопрос о том, почему в углу экрана появляется маленький значок молнии, причём — даже тогда, когда используемого блока питания более чем достаточно для обеспечения того, что нужно плате. Этот значок указывает на понижение напряжения и выводится даже в тех случаях, когда напряжение, выдаваемое источником питания, падает ниже 4,63±0,07В на очень короткий промежуток времени.<br>\n' +
                '<br>\n' +
                'Пользователи разной интересной электроники (пару лет назад и я был таким) обычно не особенно задумываются о Micro-USB-кабелях, используемых для питания их систем. Я решил произвести некоторые измерения, направленные на выяснение того, как применение различных кабелей влияет на параметры питания. И надо сказать, что хотя всё больше и больше устройств оснащаются разъёмами USB Type-C, кабели для которых обычно более качественны, чем Micro-USB-кабели, Micro-USB-разъёмы всё ещё используются в подавляющем большинстве устройств.<br>\n' +
                '<br>\n' +
                '<a href="https://habr.com/ru/company/ruvds/blog/560746/"><img src="https://habrastorage.org/webt/oj/bj/qd/ojbjqdwzme1z_la1z-2dhnielag.jpeg"></a><br>\n' +
                '<br>\n' +
                'Это касается не только Raspberry Pi, но и других подобных устройств, получающих питание по Micro-USB-кабелям (например — это мобильные телефоны, заряжаемые по Micro-USB).<br>\n' +
                '<br>\n' +
                'Сразу поделюсь моим основным выводом, который заключается в том, что для подачи питания на различные электронные устройства и для зарядки телефонов лучше пользоваться USB-кабелями с проводниками, толщина которых, как минимум, соответствует AWG20.<br>\n' +
                '<a name="habracut"></a><br>\n' +
                '<h2><font color="#3AC1EF">Теория</font></h2><br>\n' +
                'Теория, на которой основано моё исследование, достаточно проста, но это нечто такое, о чём начинающие пользователи Raspberry Pi и «обычные» люди, как правило, не задумываются. Дело в том, что каждый проводник электричества характеризуется определённым сопротивлением (то есть — его можно представить себе в виде резистора). В соответствии с законом Ома напряжение зависит от сопротивления проводника и от силы тока. В результате для сигнальных кабелей, на которых не бывает (значительного) тока, сопротивление проводов особой роли не играет. А вот если говорить о силовых кабелях и о силе тока в несколько сотен миллиампер (или в несколько ампер), сопротивление проводников начинает играть заметную роль. Даже если оно невелико, при прохождении по проводнику тока большой силы произойдёт заметное падение напряжения. А падение напряжения на питающих кабелях — это попросту потери напряжения, которое не дойдёт до того места, где оно нужно. Если источник питания, например, выдаёт 5,0В, а из-за кабеля напряжение падает на 0,3В, то устройство получит лишь 4,7В.<br>\n' +
                '<br>\n' +
                'Сопротивление проводников зависит от материала, из которого они сделаны, от площади их сечения (толщины) и от их длины. Сопротивление возрастает при увеличении длины проводника и уменьшается при увеличении его толщины. Для того чтобы уменьшить «просадку» напряжения — нужно уменьшить сопротивление кабеля, для чего надо либо использовать более толстый кабель, чем раньше, либо более короткий кабель, либо кабель, в котором сочетается и то, и другое. В описаниях к большинству Micro-USB-кабелей нет сведений о толщине используемых в них проводов. Обычно в них применяются, для всех линий, достаточно тонкие проводники. Но если речь идёт о более качественных кабелях, то в их описаниях обычно есть сведения об этом (и для линий питания в этих кабелях обычно используются провода, соответствующие AWG20).<br>\n' +
                '<br>\n' +
                '<h2><font color="#3AC1EF">Зарядные устройства</font></h2><br>\n' +
                'В качестве источников питания для Raspberry Pi и для других подобных штуковин часто используются зарядные устройства для телефонов. Существует много видов зарядных устройств. Я выбрал четыре штуки — просто потому что они оказались под рукой, и проверил, как их выходное напряжение зависит от тока, потребляемого подключёнными к ним устройствами. Речь идёт о следующих зарядных устройствах: Baseus FC67E (отличный зарядник), зарядное устройство, которое шло в комплекте с каким-то планшетом Lenovo, пара no-name-зарядников, которые прилагались к ещё каким-то устройствам. Насколько я знаю, где-то у меня были зарядные устройства на 1,5 А и на 2 А, но я не смог их найти.<br>\n' +
                '<br>\n' +
                'Достаточно интересно то, что я обнаружил, что все эти зарядные устройства ведут себя довольно стабильно во всём поддерживаемом ими диапазоне силы тока (я, честно говоря, не ожидал, что они так хорошо себя проявят).<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/aa6/c2c/e20/aa6c2ce2073e1cf91d04309e01058c74.jpg"></div><i><font color="#999999">Зарядные устройства</font></i><br>\n' +
                '<br>\n' +
                '<h2><font color="#3AC1EF">Методика тестирования</font></h2><br>\n' +
                'Я использовал электронную нагрузку TENMA 72-13200, подключённую напрямую к USB-коннектору (male) кабеля, соединённого с источником питания. Некоторое падение напряжения происходит на выводах электронной нагрузки, и лучше было бы подключить мультиметр прямо к контрольной точке, но, так как измерительные выводы довольно массивны, я решил в это раз на данный факт внимания не обращать (я, на самом деле, забыл об этом, проверяя первые два зарядника, а потом мне просто не захотелось ещё раз проводить те же самые измерения). И, кроме того, это падение напряжения не играет особой роли, так как тут я стремлюсь лишь увидеть общую картину.<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/486/58b/97f/48658b97fb930f3014534e9c796350da.jpg"></div><i><font color="#999999">Электронная нагрузка TENMA 72-13200</font></i><br>\n' +
                '<br>\n' +
                '<h2><font color="#3AC1EF">Результаты испытаний зарядных устройств</font></h2><br>\n' +
                '<h3><font color="#3AC1EF">▍Baseus FC67E (5В/3А, 9В/2,66А, 12В/2А)</font></h3><br>\n' +
                '<div class="scrollable-table"><table>\n' +
                '<tbody><tr>\n' +
                '<td><strong>Сила тока</strong></td>\n' +
                '<td><strong>Напряжение</strong></td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,0А (цепь разомкнута)</td>\n' +
                '<td>5,057В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,1А</td>\n' +
                '<td>5,056В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,5А</td>\n' +
                '<td>5,056В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,0А</td>\n' +
                '<td>5,055В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,5А</td>\n' +
                '<td>5,054В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>2,0А</td>\n' +
                '<td>5,052В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>3,0А</td>\n' +
                '<td>5,048В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>3,4А</td>\n' +
                '<td>5,056В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>3,5А</td>\n' +
                '<td>0В (защита)</td>\n' +
                '</tr>\n' +
                '</tbody></table></div><br>\n' +
                '<h3><font color="#3AC1EF">▍Lenovo 5В/1А</font></h3><br>\n' +
                '<div class="scrollable-table"><table>\n' +
                '<tbody><tr>\n' +
                '<td><strong>Сила тока</strong></td>\n' +
                '<td><strong>Напряжение</strong></td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,0А (цепь разомкнута)</td>\n' +
                '<td>4,986В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,1А</td>\n' +
                '<td>5,073В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,5А</td>\n' +
                '<td>5,061В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,0А</td>\n' +
                '<td>5,068В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,5А</td>\n' +
                '<td>5,025В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,7А</td>\n' +
                '<td>5,008В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,8А</td>\n' +
                '<td>0В (защита)</td>\n' +
                '</tr>\n' +
                '</tbody></table></div><br>\n' +
                '<h3><font color="#3AC1EF">▍Зарядное устройство no-name №1 5В/1А</font></h3><br>\n' +
                '<div class="scrollable-table"><table>\n' +
                '<tbody><tr>\n' +
                '<td><strong>Сила тока</strong></td>\n' +
                '<td><strong>Напряжение</strong></td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,0А (цепь разомкнута)</td>\n' +
                '<td>4,870В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,1А</td>\n' +
                '<td>4,929В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,5А</td>\n' +
                '<td>4,992В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,0А</td>\n' +
                '<td>5,069В (растёт с 5,06 до 5,08)</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,1А</td>\n' +
                '<td>0В (защита)</td>\n' +
                '</tr>\n' +
                '</tbody></table></div><br>\n' +
                '<h3><font color="#3AC1EF">▍Зарядное устройство no-name №2 5В/1А</font></h3><br>\n' +
                '<div class="scrollable-table"><table>\n' +
                '<tbody><tr>\n' +
                '<td><strong>Сила тока</strong></td>\n' +
                '<td><strong>Напряжение</strong></td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,0А (цепь разомкнута)</td>\n' +
                '<td>5,075В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,1А</td>\n' +
                '<td>4,960В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,5А</td>\n' +
                '<td>5,073В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,0А</td>\n' +
                '<td>5,178В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,2А</td>\n' +
                '<td>5,240В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,3А</td>\n' +
                '<td>4,335В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,4А</td>\n' +
                '<td>0В (защита)</td>\n' +
                '</tr>\n' +
                '</tbody></table></div><br>\n' +
                '<h3><font color="#3AC1EF">▍Выводы по тестированию зарядных устройств</font></h3><br>\n' +
                'Я не ждал, что два no-name-зарядника хорошо, без падения напряжения, отработают на всём заявленном диапазоне силы тока. Кроме того, надо отметить, что зарядное устройство Lenovo смогло выйти за пределы номинальных показателей (возможно — ненадолго, так как я испытывал зарядники лишь в течение 10-20 секунд). В результате я могу сделать вывод о том, что протестированные мной зарядные устройства достаточно стабильны (правда, я проводил лишь статические испытания, я не тестировал динамические характеристики источников питания).<br>\n' +
                '<br>\n' +
                '<h2><font color="#3AC1EF">Кабели</font></h2><br>\n' +
                'Я отыскал в моей коробке с проводами несколько кабелей и взял ещё один — тот, которым обычно пользуюсь.<br>\n' +
                '<br>\n' +
                'Для того чтобы протестировать кабели, я воспользовался моим любимым источником питания — Envox BB3. В роли электронной нагрузки выступил аппарат TENMA 72-13200, но в этот раз я ещё подключил к контрольной точке мультиметр (Brymen BM869S) для того чтобы получить точные результаты измерений. Выход BB3 подключён к USB-A-коннектору (female). TENMA и мультиметр подключены к Micro-USB-коннектору (female), а тестируемый кабель соединяет эти коннекторы во время испытаний.<br>\n' +
                '<br>\n' +
                'Я протестировал 4 кабеля:<br>\n' +
                '<br>\n' +
                '<ul>\n' +
                '<li>Обычный короткий кабель (25 см), который, если я ничего не путаю, шёл с каким-то пауэрбанком.</li>\n' +
                '<li>Обычный кабель длиной 90 см, которым была укомплектована какая-то плата для разработки и отладки ПО.</li>\n' +
                '<li>Обычный кабель длиной 200 см, который я купил много лет назад для того, чтобы подавать питание на Raspberry Pi 1.</li>\n' +
                '<li>Кабель <a href="https://www.tronsmart.com/products/mupp2-6ft-premium-micro-usb-cable">Tronsmart</a> длиной 180 см (с линиями питания, выполненными 20AWG-проводами). Похожие кабели есть у Anker.</li>\n' +
                '</ul><br>\n' +
                'В этот тест я мог бы включить и ещё один кабель — такой, который поставляется со смартфонами (особенно — с такими, которые поддерживают быструю зарядку). У меня есть такой кабель (с разъёмом Micro-USB), но он во время испытаний использовался в другом месте, поэтому его я не протестировал. Правда, он, если его проверить, должен показать хорошие результаты, так как сейчас он применяется для питания одного Raspberry Pi и предупреждение о падении напряжения при этом не выводится.<br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/8a8/44b/f4b/8a844bf4b4030a424ccce22559a6fa2a.jpg"></div><i><font color="#999999">TENMA 72-13200 и Envox BB3</font></i><br>\n' +
                '<br>\n' +
                '<div style="text-align:center;"><img src="https://habrastorage.org/getpro/habr/post_images/dfb/39f/cdd/dfb39fcddd7cb6833bc4fb535647798d.jpg"></div><i><font color="#999999">Мультиметр Brymen BM869S</font></i><br>\n' +
                '<br>\n' +
                '<h2><font color="#3AC1EF">Результаты испытаний Micro-USB-кабелей</font></h2><br>\n' +
                '<h3><font color="#3AC1EF">▍Обычный кабель длиной 25 см</font></h3><br>\n' +
                '<div class="scrollable-table"><table>\n' +
                '<tbody><tr>\n' +
                '<td><strong>Ток, проходящий по кабелю</strong></td>\n' +
                '<td><strong>Входное напряжение</strong></td>\n' +
                '<td><strong>Выходное напряжение</strong></td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,1А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,962В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,5А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,821В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,638В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>2,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,272В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>3,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>3,903В</td>\n' +
                '</tr>\n' +
                '</tbody></table></div><br>\n' +
                '<h3><font color="#3AC1EF">▍Обычный кабель длиной 90 см</font></h3><br>\n' +
                '<div class="scrollable-table"><table>\n' +
                '<tbody><tr>\n' +
                '<td><strong>Ток, проходящий по кабелю</strong></td>\n' +
                '<td><strong>Входное напряжение</strong></td>\n' +
                '<td><strong>Выходное напряжение</strong></td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,1А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,936В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,5А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,672В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,341В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>2,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>3,672В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>3,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>2,978В</td>\n' +
                '</tr>\n' +
                '</tbody></table></div><br>\n' +
                '<h3><font color="#3AC1EF">▍Обычный кабель длиной 200 см</font></h3><br>\n' +
                '<div class="scrollable-table"><table>\n' +
                '<tbody><tr>\n' +
                '<td><strong>Ток, проходящий по кабелю</strong></td>\n' +
                '<td><strong>Входное напряжение</strong></td>\n' +
                '<td><strong>Выходное напряжение</strong></td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,1А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,892В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,5А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,454В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>3,908В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>2,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>2,809В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>3,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>1,665В</td>\n' +
                '</tr>\n' +
                '</tbody></table></div><br>\n' +
                '<h3><font color="#3AC1EF">▍Кабель Tronsmart длиной 180 см (с линиями питания, выполненными проводом 20AWG)</font></h3><br>\n' +
                '<div class="scrollable-table"><table>\n' +
                '<tbody><tr>\n' +
                '<td><strong>Ток, проходящий по кабелю</strong></td>\n' +
                '<td><strong>Входное напряжение</strong></td>\n' +
                '<td><strong>Выходное напряжение</strong></td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,1А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,963В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>0,5А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,803В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>1,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,604В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>2,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>4,209В</td>\n' +
                '</tr>\n' +
                '<tr>\n' +
                '<td>3,0А</td>\n' +
                '<td>5,0В</td>\n' +
                '<td>3,811В</td>\n' +
                '</tr>\n' +
                '</tbody></table></div><br>\n' +
                'В данном случае, если поднять входное напряжение до 5,2В (как сделано в официальном источнике питания для Raspberry Pi), то можно получить 4,37В при 1,2А, и 4,61В при 1,5А. В результате данный кабель очень хорошо подходит для подачи питания на Raspberry Pi 3/4 в том случае, когда нужен кабель подлиннее.<br>\n' +
                '<br>\n' +
                '<h2><font color="#3AC1EF">Итоги</font></h2><br>\n' +
                'Оказалось, что зарядные устройства для телефонов, даже no-name, достаточно стабильны на всём диапазоне поддерживаемой ими силы тока (вывод этот, правда, я сделал на основе испытания всего четырёх зарядников). Но USB-кабели, если учесть падение напряжения, вызываемое ими, очень сильно влияют на передачу питания от его источника к различным устройствам. Первые три кабеля — это обычные дешёвые кабели, которые не стоит использовать для питания «прожорливых» устройств. Кабели, которые идут со смартфонами, обычно достаточно хороши, поэтому их вполне можно применять для питания тех же Raspberry Pi. Что-то другое есть смысл использовать в том случае, если нужны более длинные кабели, или если имеются кабели более высокого качества.<br>\n' +
                '<br>\n' +
                'Найти хороший Micro-USB-кабель непросто, так как большинство производителей не указывает в характеристиках кабеля сведения о толщине используемых в нём линий питания. Если вы выбираете кабель и можете ориентироваться на толщину проводов, используемых в нём, берите тот, где используются провода толщиной как минимум AWG20 или больше (тогда число в маркировке вида AWGxx будет меньше).<br>\n' +
                '<br>\n' +
                'В результате, учитывая то, что Raspberry Pi (без периферийных устройств) при полной нагрузке потребляет до 1А (3/3B/3B+) или до 1,5А (Raspberry Pi 4), в появлении значка с молнией (или в выдаче уведомления dmesg о падении напряжения), скорее всего, будет виноват не источник питания, а кабель.<br>\n' +
                '<br>\n' +
                'Сталкивались ли вы с проблемами подбора источников питания и кабелей для Raspberry Pi?<br>\n' +
                '<br>\n' +
                '<a href="https://ruvds.com/news/read/142?utm_source=habr&amp;utm_medium=article&amp;utm_campaign=perevod&amp;utm_content=micro-usb-kabeli_i_pitanie_raspberry_pi"><div style="text-align:center;"><img width="100%" src="https://habrastorage.org/getpro/habr/post_images/72c/231/bb1/72c231bb14cabc532efed2135b0126e7.jpg"></div></a><br>\n' +
                '<a href="http://ruvds.com/ru-rub?utm_source=habr&amp;utm_medium=article&amp;utm_campaign=perevod&amp;utm_content=micro-usb-kabeli_i_pitanie_raspberry_pi"><img src="https://habrastorage.org/r/w780/webt/ou/g5/kh/oug5kh6sjydt9llengsiebnp40w.png"></a></div>',
            imageUrl: 'https://habrastorage.org/webt/oj/bj/qd/ojbjqdwzme1z_la1z-2dhnielag.jpeg',
            karma: 19,
            tags: [{id: 15, title: 'cable for power'}, {id: 16, title: 'питание'}],
            user: {
                id: 9,
                firstName: 'Valik',
                lastName: 'RUVDS.com',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/f8e/004/d87/f8e004d878b0e35c2defaaca5386ae70.png',
                login: 'ValikRUVDS.com'
            },
            bookmarked: false
        },
        {
            id: 10,
            title: 'Обзор PAT9125 оптического датчика филамента для 3d печати',
            countBookmarks: 1,
            countComments: 0,
            countViews: 3,
            creationTime: new Date('May 31, 2021 18:51:00'),
            text: '<div class="post__text post__text_v2" id="post-content-body"><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/ee2/e95/835/ee2e9583550ddf7e7ede4b8252238b3a.jpg" width="1000" height="476"><figcaption></figcaption></figure><p>Добрый день друзья. Сегодня я хотел бы рассказать вам про датчик филамента PAT9125, а также про мой опыт общения с ним.</p><p>PAT9125 это оптический датчик который применяется на 3d принтерах Prusa. Этот датчик может отслеживать не только момент окончания филамента но и момент его застревания. Например если у вас возникла тепловая пробка.</p><p>Главная проблема датчика, его нельзя подключить напрямую к плате с Marlin. Поскольку Marlin поддерживает только подключение энкодера, а этот датчик должен быть подключен по интерфейсу I2C. Чтобы разрешить эту проблему я использовал attiny85 digispark. Датчик подключается к Attiny а уже Attiny в свою очередь эмулирует работу энкодера.</p><h2>Настройка Marlin</h2><p>В файле Configuration.h нужно раскомментировать параметр #define FILAMENT_RUNOUT_SENSOR . А вот параметр #define FIL_RUNOUT_PULLUP  лучше закомментировать поскольку у нас ненастоящий енкодер то подтяжка attiny к линии питания будет только мешать работе.</p><p>Кроме того нужно раскомментировать параметр #define FILAMENT_RUNOUT_DISTANCE_MM это скажет Marlin что у нас не концевой выключатель, а энкодер. Значение параметра надо уменьшить по умолчанию там стоит 25мм. Чтоб вы понимали сколько это, принтер успеет уложить два слоя калибровочного куба воздухом прежде чем заметит что что-то не так. Я поставил там 5мм можно и меньше но тогда можно столкнутся с ложными срабатываниями.</p><p>В файле Configuration_adv.h нужно раскомментировать #define ADVANCED_PAUSE_FEATURE</p><p>В файле Pinout вашей платы надо задать пин к которому будет подключен датчик в параметре #define FIL_RUNOUT_PIN.</p><h2>Особенности работы датчика</h2><p>Во первых я очень надеялся что поскольку я использую прозрачную трубку для филамента то датчик можно будет одеть прямо на неё и он будет видеть только филамент. Но оказалось, что датчик прекрасно видит эту прозрачную трубку и мне пришлось делать в ней окно.</p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/94b/840/994/94b8409941086c045ea740cbecfcc5bd.jpg" width="1000" height="916"><figcaption></figcaption></figure><p>Следующая особенность касалась уже Attiny. Сначала я подключил принтер к пину P3 и Attiny просто не стала запускаться. То есть без подключения к принтеру все прекрасно работает, а стоит подключить Attiny не стартует. После этого я подключил принтер к пину P5, Attiny загрузилась но порт просто не работал на нем всегда был высокий потенциал, возможно у меня оказалась бракованная  Attiny. Все заработало только когда я подключил принтер к пину P1, пин на котором располагается диод.</p><p>Также я хочу отметить что датчик отслеживает отдельно движение по оси X и по оси Y. В моем случае используется ось X, но если вы захотите расположить датчик по другому. Например расположить его перпендикулярно движению филамента, то надо в прошивке Attiny заменить ось X на Y.</p><p>Вот так выглядит мой принтер с датчиком</p><figure class="full-width "><img src="https://habrastorage.org/getpro/habr/upload_files/3ba/271/b1d/3ba271b1d6117e232d9307ffe9ae8894.jpg" width="1000" height="663"><figcaption></figcaption></figure><p><a href="https://github.com/Deema35/prusa_sensor_marlin2.0" rel="noopener noreferrer nofollow">Прошивка для Attiny </a></p><p><a href="https://www.thingiverse.com/thing:4878669" rel="noopener noreferrer nofollow">Ссылка на корпус для датчика </a></p></div>',
            imageUrl: 'https://habrastorage.org/getpro/habr/upload_files/50e/46b/fe6/50e46bfe63169183849e22198121ae5e.png',
            karma: 1,
            tags: [{id: 17, title: 'Датчик филамента'}, {id: 18, title: '3d-печать'}],
            user: {
                id: 10,
                firstName: 'Grisha',
                lastName: 'deema35',
                imageUrl: 'https://habrastorage.org/getpro/habr/avatars/c63/50c/4cd/c6350c4cdc311a1ddc793207248e31cb.gif',
                login: 'GrishaDeema35'
            },
            bookmarked: false
        }
    ];

    private subscription: Subscription;

    getPostById(postId: number): Observable<FullPostDto> {
        return of(this.fullPosts.find((x) => {
            return x.id == postId;
        }));
    }

    getPostsByParams(page: number, size: number, sort: string, dateFrom: Date, dateTo: Date,
                     sortType: string, searchValue: string, tagIds: number[]): Observable<ShortPostDto[]> {

        return of(this.posts.filter((x) => {
            let condition = true;
            if (searchValue != null) {
                condition = condition && x.title.includes(searchValue);
            }
            if (tagIds != null && tagIds.length > 0) {
                condition = condition && this.filterTagId(x.tags.map(t => t.id), tagIds);
            }

            return condition;
        }).sort((a, b) => b[sort] - a[sort]));
    }

    getPostsByUserId(userId: number): ShortPostDto[] {
        return this.posts.filter(x => x.user.id == userId);
    }

    filterTagId(postTags: number[], tags: number[]) {
        let condition = true;

        tags.forEach((tag) => {
            condition = condition && postTags.indexOf(tag) != -1;
        });
        return condition;
    }

    addBookmark(postId: number) {
        this.fullPosts = this.fullPosts.map((p) => {
            if (p.id == postId) {
                p.bookmarked = true;
            }
            return p;
        });
    }

    deleteBookmark(postId: number) {
        this.fullPosts = this.fullPosts.map((p) => {
            if (p.id == postId) {
                p.bookmarked = false;
            }
            return p;
        });
        console.log(this.fullPosts);
    }

    getBookmarks(sort: string) {
        return this.fullPosts.filter(x => x.bookmarked == true)
            .map(x => x.id)
            .map(y => this.posts.find(x => x.id == y))
            .sort((a, b) => b[sort] - a[sort]);
    }

    getAvailableSorts(): Observable<string[]> {
        return of(['countComments', 'countViews', 'countBookmarks', 'karma', 'creationTime']);
    }

    getRecommendationsByPostId(postId: number) {
        return of(PostService.getRandom(this.posts, 3));
    }

    static getRandom(arr, n) {
        let result = new Array(n),
            len = arr.length,
            taken = new Array(len);
        if (n > len) {
            throw new RangeError('getRandom: more elements taken than available');
        }
        while (n--) {
            const x = Math.floor(Math.random() * len);
            result[n] = arr[x in taken ? taken[x] : x];
            taken[x] = --len in taken ? taken[len] : len;
        }
        return result;
    }
}
